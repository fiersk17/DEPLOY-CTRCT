<!DOCTYPE html>
<html>
head><script src="scripts/web3.min.js"></script><script src="scripts/angular.min.js"></script><script src="scripts/underscore-min.js"></script><script src="scripts/sha3.min.js"></script><script src="scripts/filtered_list.js"></script><script src="config.js"></script><script src="scripts/main.js"></script><script src="scripts/tx_in_progress.js"></script><script src="scripts/dialogMessage.js"></script><link rel="stylesheet" type="text/css" href="styles/main.css"/><link rel="stylesheet" type="text/css" href="styles/bootstrap.min.css"/></head><body ng-app="arbitration"><div ng-controller="ArbitrationCtrl"><div><div style="width:20%; height:100%; position: absolute; left: 0px; top: 0px" class="lightblue"><div style="padding-top: 65px"></div><div ng-click="activetab = 0" ng-class="{ semilightblue: !activetab}" class="tabselect">Make a new escrow</div><div ng-click="activetab = 1" ng-class="{ semilightblue: activetab == 1}" class="tabselect">Register on arbiter list</div><div ng-click="activetab = 2" ng-class="{ semilightblue: activetab == 2}" class="tabselect">Adjudicate disputes</div></div><div style="width:80%; position: absolute; right: 0px"><div style="height: 100%" vertical-align:="vertical-align:" top="top" class="white"><div ng-show="!activetab"><center><table style="margin:100px 0px" cellpadding="20px"><tr><td>Your address</td><td><select ng-model="myAccount" ng-options="x for x in accounts"></select></td></tr><tr><td>Counterparty's address</td><td><input type="text" placeholder="Address" ng-model="escrow.otherAddress"/></td></tr><tr><td>Arbiters</td><td><div ng-repeat="a in escrow.arbiters" style="height:40px"><small>{{ a }}</small></div></td><td><div ng-repeat="a in escrow.arbiters" style="height:40px"><button ng-click="removeArbiter(a)" style="margin-left:12px" class="btn raise5">Remove</button></div></td></tr><tr><td>Add new arbiter</td><td><span><input type="text" placeholder="Address" ng-model="escrow.newArbiter"/></span></td><td><button ng-click="addArbiter()" style="margin-left:10px" class="btn raise5">Add</button></td></tr><tr><td>Add new arbiter from selection</td><td><select ng-model="escrow.newArbiterFromSelection" ng-options="x for x in arbiters"></select></td><td><button ng-click="addArbiterFromSelection()" style="margin-left:12px" class="btn raise5">Add</button></td></tr><tr><td></td><td><span>{{ escrow.newArbiterFromSelectionDescription }}</span></td></tr><tr><td>Description</td><td><textarea placeholder="Description" ng-model="escrow.description" style="width:333px" rows="4"></textarea></td></tr><tr><td>Value</td><td><input type="text" placeholder="Value" ng-model="escrow.value"/></td></tr><tr><td>Fee</td><td><input type="text" placeholder="Fee" ng-model="escrow.fee"/></td></tr><tr><td></td><td><button ng-click="createEscrow()" ng-disabled="cannot_create_escrow" class="btn raise5">Create escrow   </button><small style="margin-left: 20px" ng-show="cannot_create_escrow" class="redtext">{{ cannot_create_escrow_error_message }}</small></td></tr></table></center></div><div ng-show="activetab == 1"><center><table style="margin:100px 0px" cellpadding="20px"><tr><td>Fee</td><td><input type="text" placeholder="Fee" ng-model="listingFee"/></td></tr><tr><td> </td><td><button ng-click="registerArbiter()" ng-disabled="cannot_register" class="btn raise5">Register or pay fee</button><span style="margin-left: 20px" ng-show="cannot_register" class="redtext">{{ cannot_register_error_message }}</span></td></tr><tr><td>Current description</td><td><span>{{ currentArbiterDescription }}</span></td></tr><tr><td>New description</td><td><input type="text" placeholder="Description" ng-model="listingDescription"/></td></tr><tr><td> </td><td><button ng-click="setArbiterDescription()" ng-disabled="cannot_set_description" class="btn raise5">Set description</button><span style="margin-left: 20px" ng-show="cannot_set_description" class="redtext">{{ cannot_set_description_error_message }}</span></td></tr></table></center></div><div ng-show="activetab == 2"><center><table style="margin:100px 0px" cellpadding="20px"><tr><td style="width: 250px">Description</td><td>Value</td><td>Fee</td><td></td><td></td></tr><tr ng-repeat="d in escrows"><td>{{ d.description }}</td><td>{{ d.value }}</td><td>{{ d.fee }}</td><td ng-show="d.type == 1"><button ng-click="vote(d.id, true)" style="width: 45%" class="btn raise5">Vote A</button><button ng-click="vote(d.id, false)" style="width: 45%; margin-left: 8%" class="btn raise5">Vote B</button></td><td ng-show="d.type == 2"><button ng-click="vote(d.id, false)" class="btn raise5">Release funds to counterparty</button></td><td ng-show="d.type == 3"><button ng-click="vote(d.id, true)" class="btn raise5">Release funds to counterparty</button></td></tr></table></center></div></div></div><div tx-in-progress="tx-in-progress"></div><div message="message"></div></div></div></body>
<head>
<!--<script type="text/javascript" src="main.js"></script>-->
<!--<script type="text/javascript" src="httprpc.js"></script>-->
<title>Chat</title>
<style>
body {
	font-family: Ubuntu, Tahoma, sans;
	margin: 0;
}
h1 {
	text-align: center;
	font-size: 26pt;
	color: rgba(0,0,0, 0.75);
}
div#chat {
	margin: 1em;
	box-shadow: #ccc 0 0 1em;
	border: #ddd 1 solid;
}
div#log {
/*	font-size: small;*/
	height: 60ex;
	margin-bottom: 0;
	overflow-y: auto;
}
div#in {
	border: #ddd 1 solid;
	border-top: none;
	height: 1.5em;
}
input {
	margin-top: 0;
	border: none;
	background: #f8f8f8
}
div#entrydiv {
	margin-left: 8.2em;
	margin-right: 4.2em;
}
div#roomdiv {
	margin-right: 6.2em;
}
input#entry, input#room {
	width: 100%
}
input#name {
	width: 8em;
	float: left;
}
button#setRoom {
	display: block;
	float: right;
	width: 6em;
}
button#post {
	display: block;
	float: right;
	width: 4em;
}
button {
	border: 1px #ccc solid;
	background: #fff;
	height: 1.5em;
	margin: none;
}	
span.timestamp {
	color: #888888;
}
span.who {
	font-weight: bold;
}
div.private {
	background: #fee;
	border-right: 6pt #f88 solid;
}
div.private span.who {
	color: #f55;
}
div.private span.me {
	color: #f55;
	font-weight: normal;
}
div.room span.who {
	color: #55f;
}
div.room span.me {
	color: #5c5;
}
span.message {
}
</style>
<head>
<title>GavCoin</title>
<style>
body {
	font-family: Ubuntu, Tahoma, sans;
	background-image: url("backcoin.jpg");
	background-size:   cover;
	background-repeat: no-repeat;
	margin: 0;
}
h1 {
	text-align: center;
	font-size: 26pt;
	color: rgba(0,0,0, 0.75);
}
ul#latest {
	list-style-type: none;
	margin: 0;
	margin-top: 16pt;
	padding: 0;
	border: 16pt rgba(0,0,0, 0.05) solid;
}
ul#latest li {
	padding: 4pt 0pt;
}
ul#latest li:nth-child(even) {
	background-color: rgba(0,0,0, 0.05);
}
span.timestamp {
	width: 13em;
	display: inline-block;
	color: #888;
}
span#gav {
	font-weight: bold;
}
span#eth {
	font-weight: bold;
}
div#top {
	background-color: rgba(0,0,0,0.5);
	color: white;
	padding: 6pt;
	text-shadow: 0px 0px 10px white;
	border-radius: 0 0 6pt 6pt;
}
div#balance {
//	margin-top: 30pt;
	float: left;
}
div#addr {
//	margin-top: 30pt;
//	color: #888;
	float: right;
}
span.xfer {
	color: #888;
}
span.out {
	color: #800;
}
span.mine {
	color: #060;
}
span.in {
	color: #008;
}
span.ind {
	font-weight: bold;
	margin: 0 4pt;
}
span.to, span.from {
	font-weight: normal;
	display: inline-block;
//	width: 25em;
	width: 5em;
}
span.value {
	font-weight: bold;
	width: 5em;
	display: inline-block;
	text-align: right;
}
span.name {
	font-weight: bold;
	font-size: small;
	padding: 0 3pt;
	width: 3em;
	display: inline-block;
	text-align: center;
}
span.xfer span.name {
	font-weight: normal;
}
span.units {
	font-size: small;
	font-weight: bold;
}
li span.units {
	padding: 0 4pt;
}
span.confirms, span.unconfirmed {
	background: #8d9;
	font-size: small;
	margin: -1pt 4pt 4pt 4pt;
	padding: 1pt 3pt 1pt 3pt;
	border: #474 1pt solid;
	border-radius: 4pt;
	float: right;
}
span.unconfirmed {
	background: #f88;
	border-color: #844;
}
input#val {
	width: 8em;
}
input#to {
//	width: 24em;
	width: 10em;
}
div#controls input {
	background: rgba(255,255,255,0.25);
	border: 2pt solid rgba(0,0,0,0.5); 
}
div#controls input.invalid {
	background-color: #fcc;
}
div#controls input.maybevalid {
	background-color: #fec;
}
div#controls button {
	background: rgba(0,0,0,0.25);
	border: 2pt solid rgba(0,0,0,0.5); 
}
button#mine {
	float: right;
}
div#controls button.invalid {
	background: transparent;
	color: rgba(0,0,0,0.25);
	border: 2px solid rgba(0,0,0,0.25);
}
div#controls {
	text-align: center;
	margin-top: 16pt;
	padding: 16pt;
	background-color: rgba(0,0,0, 0.05);
}
div#title {
	margin-top: 10pt;
	margin-left: 18pt;
	font-size: 45pt;
	font-weight: bold;
	text-align: center;
	background-color: rgba(255, 255, 255, 0.5);
	border-radius: 56px;
	display: inline-block;
	padding: 8px;
	padding-right: 24px;
	box-shadow: 0 0 16pt black;
}
div#title img {
	padding-top: 0pt;
	margin-right: 10pt;
}
div#title span {
	color: #430;
	padding-top: 20pt;
	display: inline-block;
	margin-top: -10pt;
}
span#unc {
	color: #fdd;
	font-weight: normal;
}
span#unc span {
	font-weight: bold;
}
</style>
head><link rel="stylesheet" type="text/css" href="styles/main.css"/><link rel="stylesheet" type="text/css" href="styles/bootstrap.min.css"/></head><body><div id="container"></div><script src="config.js"></script><script src="scripts/web3.min.js"></script><script src="scripts/es5-shim.min.js"></script><script src="scripts/es5-sham.min.js"></script><script src="scripts/console-polyfill.js"></script><script src="scripts/react.js"></script><script src="scripts/JSXTransformer.js"></script><script src="scripts/sha3.min.js"></script><script src="scripts/common.js"></script><script src="scripts/filtered_list.js"></script><script type="text/jsx" src="scripts/onePhaseAdBox.js"></script><script type="text/jsx" src="scripts/twoPhaseAdBox.js"></script><script type="text/jsx" src="scripts/main.js"></script></body>
<head>
<title>Ethereum General Exchange</title>
<style>
body {
	font-family: Ubuntu, Tahoma, sans;
	margin: 0;
	background-color: #ccd;
}
h1 {
	text-align: center;
	font-size: large;
	color: rgba(0,0,0, 0.75);
	margin: 0;
}
div#orderbooks {
	margin: 1em;
}
div#ourordersout {
	margin: 1em;
}
div.orderbook {
	border: none;
	padding: 1em;
	margin: 1em 0;
	background: rgba(0,0,0, 0.05);
}
ul.orders {
	list-style-type: none;
	margin: 0;
	margin-top: 4pt;
	padding: 0;
}
.our.orders li:nth-child(even) {
	background-color: rgba(0,0,0, 0.05);
}
div#top {
	background-color: rgba(0,0,0,0.5);
	color: white;
	padding: 6pt;
	text-shadow: 0px 0px 10px white;
	border-radius: 0 0 6pt 6pt;
}
span.units {
	font-size: small;
	font-weight: bold;
}
li span.units {
	padding: 0 4pt;
}
input#val {
	width: 8em;
}
input#to {
	width: 10em;
}
div#controls input {
	background: rgba(255,255,255,0.25);
	border: 2pt solid rgba(0,0,0,0.5); 
}
div#controls select {
	background: rgba(255,255,255,0.25);
	border: 2pt solid rgba(0,0,0,0.5); 
}
div#controls input.invalid {
	background-color: #fcc;
}
div#controls input.maybevalid {
	background-color: #fec;
}
div#controls button {
	background: rgba(0,0,0,0.25);
	border: 2pt solid rgba(0,0,0,0.5); 
}
button#mine {
	float: right;
}
div#controls button.invalid {
	background: transparent;
	color: rgba(0,0,0,0.25);
	border: 2px solid rgba(0,0,0,0.25);
}
div#controls {
	text-align: center;
	margin-top: 16pt;
	padding: 16pt;
	background-color: rgba(0,0,0, 0.05);
}
#orderhave, #orderwant {
	width: 5em;
}
#placeorder {
	margin-top: 3em;
	border-top: 1px black solid;
	padding-top: 1em;
}
li.order {
	margin: 0;
	border: 0;
	clear: both;
}
li.order button {
	float: right;
}
li.order button.delete {
	background-color: #f88;	
}
li.order div {
	padding: 6pt 0pt;
	margin: 0pt 20pt;
}
li.order div span {
	text-align: right
}
li.order span.margin {
	width: 1em;
	float: left;
	background: #888 solid;
	padding: 6pt 2pt;
	text-align: center;
}
li.order.existing span.margin {
	background-color: rgba(0,0,0,0.1);
}
li.order.existing {
	color: rgba(0,0,0,0.2);
}
li.order.matching {
	color: black;
	background: rgba(255, 255, 255, 0.25);
}
li.order.matching span.margin {
	background-color: #a84;
}
li.order.existing.best {
	border-bottom: 4pt rgba(0,0,0,0.2) solid;
}
li.order.existing.best span.margin {
	background-color: rgba(0,0,0,0.2);
}
li.order.matching.best {
	border-top: 4pt #a44 solid;
}
li.order.matching.best span.margin {
	background-color: #a44;
}
li.order span.want, div.order span.have {
	margin-left: 4pt;
	padding-left: 4pt;
}
li.order span.want {
	width: 12em;
	float: left;
}
li.order span.have {
	width: 12em;
	float: right;
}
li.order.existing span.have span.verb {
	color: transparent;
}
li.order span.rate {
	width: 12em;
	float: left;
}
li.order.matching span.rate span.value {
	text-shadow: 0pt 0pt 5pt #fff;
	font-weight: bold;
	color: #800;
}
</style>
<script>
//var web3 = require('web3');
//web3.setProvider(new web3.providers.AutoProvider());
//TODO: this should just be:
// import("Config");
// import("Gavsino");
var Config = web3.eth.contractFromAbi([{"constant":false,"inputs":[],"name":"kill","outputs":[]},{"constant":true,"inputs":[{"name":"service","type":"uint256"}],"name":"lookup","outputs":[{"name":"a","type":"address"}]},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"service","type":"address"}],"name":"register","outputs":[]},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"unregister","outputs":[]}]);
var Gavsino = web3.eth.contractFromAbi([{"constant":true,"inputs":[],"name":"totalShares","outputs":[{"name":"r","type":"uint256"}]},{"constant":true,"inputs":[{"name":"wei","type":"uint256"}],"name":"sharesValue","outputs":[{"name":"shares","type":"uint256"}]},{"constant":false,"inputs":[],"name":"buyIn","outputs":[]},{"constant":false,"inputs":[{"name":"shares","type":"uint256"}],"name":"cashOut","outputs":[]},{"constant":true,"inputs":[{"name":"key","type":"hash256"},{"name":"bet","type":"hash256"}],"name":"winningsWithKey","outputs":[{"name":"r","type":"uint256"}]},{"constant":true,"inputs":[],"name":"equity","outputs":[{"name":"r","type":"uint256"}]},{"constant":true,"inputs":[],"name":"sharesHeld","outputs":[{"name":"r","type":"uint256"}]},{"constant":false,"inputs":[{"name":"pIn256","type":"uint256"},{"name":"key","type":"hash256"}],"name":"bet","outputs":[]},{"constant":true,"inputs":[],"name":"valueOfShares","outputs":[{"name":"r","type":"uint256"}]},{"constant":true,"inputs":[{"name":"bet","type":"hash256"}],"name":"winnings","outputs":[{"name":"r","type":"uint256"}]},{"constant":false,"inputs":[{"name":"bet","type":"hash256"}],"name":"claim","outputs":[]},{"constant":false,"inputs":[{"name":"key","type":"hash256"}],"name":"recycle","outputs":[]},{"constant":true,"inputs":[{"name":"s","type":"uint256"}],"name":"valueOf","outputs":[{"name":"r","type":"uint256"}]},{"constant":false,"inputs":[],"name":"empty","outputs":[]}]);
var theGavsino = Gavsino(Config().lookup(2));
var tickets = [];
function refreshHoldings() {
	document.getElementById("myshares").innerHTML = theGavsino.sharesHeld();
	document.getElementById("totalshares").innerHTML = theGavsino.totalShares();
	document.getElementById("equity").innerHTML = web3.toEth(web3.fromDecimal(theGavsino.equity() + ''));
	document.getElementById("mysharesvalue").innerHTML = web3.toEth(web3.fromDecimal(theGavsino.valueOfShares() + ''));
	sharesamountChanged();
}
function refreshTickets() {
//	console.log("refreshing...");
	var uiBets = '';
//		console.log("number is " + number);
	for (var i in tickets) { var t = tickets[i];
		uiBets +=
			'<div>' +
			'<span class="amount">' + web3.toEth(t.amount) + '</span>' +
			' @ ' +
			'<span class="prob">' + web3.toDecimal(t.p) + ' in 256</span>' +
			' : ' +
			'<span id="' + t.bet + '" class="status">' + (
				t.claimed ? 'won ' + web3.toEth(t.claimed) :
				t.recycled ? 'lost' :
				'pending...'
				) + '</span>' +
			'</div>'; }
	document.getElementById("bets").innerHTML = uiBets;
	for (var i in tickets)
	{
		var t = tickets[i];
		if (+t.number < +web3.eth.number && !t.recycled && !t.claimed)
		{
			console.log("pending..." + t.bet);
			var w = theGavsino.winnings(t.bet);
			var e = document.getElementById(t.bet);
			if (!t.recycled && !t.claimed)
			{
				console.log("updating..." + t.bet + "; winnings: " + w);
				if (w > 0)
				{
					theGavsino.claim(t.bet);
					t.claimed = w;
					e.innerHTML = 'claiming ' + web3.toEth(w) + "!";
				}
				else
				{
					theGavsino.claim(t.bet);
					t.recycled = true;
					e.innerHTML = "refunding 0.5%";
				}
			}
		}
	}
}
function sharesamountChanged() {
	var amount = web3.fromDecimal(document.getElementById("sharesamount").value.toString() + '000000000000000');
//	console.log("amount: " + amount);
	document.getElementById("sharesofvalue").innerHTML = theGavsino.sharesValue(amount);
}
function makeid() {
    var text = "0x";
    var possible = "0123456789abcdef";
    for (var i = 0; i < 64; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
}
	
function newTicket(amount, p) {
	var bet = makeid();
	var amount = web3.fromDecimal(amount.toString() + '000000000000000');
	var key = web3.sha3(bet)
	p = +p < 1 ? 1 : +p > 255 ? 255 : p;
	var ticket = { 'amount': amount, 'p': web3.fromDecimal(p), 'key': key, 'bet': bet, 'number': web3.eth.number, 'claimed': null };
	tickets.push(ticket);
	theGavsino.value(amount).bet(+p, key);
	refreshTickets();
}
function buyIn(amountineth) {
	amount = web3.fromDecimal(amountineth.toString() + '000000000000000');
	theGavsino.value(amount).buyIn();
}
function cashOut(shares) {
	theGavsino.cashOut(shares);
}
var w = web3.eth.watch({'address': theGavsino.address});
w.changed(function(d) {
	refreshHoldings();
	refreshTickets();
});
</script>
<head>
    <title>NameReg</title>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <style>
body {
	font-family: Gentium, Georgia, serif
}
h1, h2 {
	font-family: Trebuchet MS, sans
}
h1 { 
	font-size: 16pt
}
h2 { 
	font-size: 13pt
}
div {
	margin-left: 8pt;
}
img {
	margin: 4pt;
	padding: 6pt;
}
    </style>
<head>
<title>Frontier Registry</title>
</head>
<style>
* {
	font-family: Ubuntu, Tahoma, sans
}
input {
	border-radius: 1pt;
	margin: 2pt;
	padding: 2pt;
	border: none;
	box-shadow: 0px 1px 4px 0px rgba(128,128,128,1);
}
input.account, input.hash {
	font-family: monospace, Courier;
}
input.good {
	background: #efe
}
input.bad {
	background: #fee
}
span#iscanon {
	border: 1pt solid #008;
	background: #ddf;
	border-radius: 2pt;
	margin: 2pt;
	padding: 2pt;
	font-size: x-small;
	font-family: Tahoma, sans
}
span.ok {
	border: 1pt solid #080;
	background: #dfd;
	border-radius: 2pt;
	margin: 2pt;
	padding: 2pt;
	font-size: x-small;
	font-family: Tahoma, sans
}
span.error {
	border: 1pt solid #800;
	background: #fdd;
	border-radius: 2pt;
	margin: 2pt;
	padding: 2pt;
	font-size: x-small;
	font-family: Ubuntu, Tahoma, sans
}
input#name {
	margin: 1em 1em 1em 1em;
	font-size: large;
	font-weight: bold;
	font-family: Ubuntu, Tahoma, sans
}
</style>
<head>
<title>URL Hint Registry</title>
<style>
* {
	font-family: Ubuntu, Tahoma, sans
}
input {
	border-radius: 1pt;
	margin: 2pt;
	padding: 2pt;
	border: none;
	box-shadow: 0px 1px 4px 0px rgba(128,128,128,1);
}
input.account, input.hash {
	font-family: monospace, Courier;
}
input.good {
	background: #efe
}
input.bad {
	background: #fee
}
span#iscanon {
	border: 1pt solid #008;
	background: #ddf;
	border-radius: 2pt;
	margin: 2pt;
	padding: 2pt;
	font-size: x-small;
	font-family: Tahoma, sans
}
span.ok {
	border: 1pt solid #080;
	background: #dfd;
	border-radius: 2pt;
	margin: 2pt;
	padding: 2pt;
	font-size: x-small;
	font-family: Tahoma, sans
}
span.error {
	border: 1pt solid #800;
	background: #fdd;
	border-radius: 2pt;
	margin: 2pt;
	padding: 2pt;
	font-size: x-small;
	font-family: Ubuntu, Tahoma, sans
}
input#hash {
	margin: 1em 1em 1em 1em;
	font-size: large;
	font-weight: bold;
}
input#url {
	margin: 1em 1em 1em 1em;
	font-size: large;
	font-weight: bold;
	font-family: Ubuntu, Tahoma, sans
}
</style>
</head>
<meta charset="UTF-8">
<title>Clock</title>
 
<script type="text/javascript">
<!--
window.onload = function()
{
    var width   = 100;
    var height  = 100;
    var centerX = Math.floor(width / 2);
    var centerY = Math.floor(height / 2);
    var canvas  = document.getElementById('clock');
    var context = canvas.getContext('2d');
     
    setInterval(drawClock, 1000);
    drawClock();
         
    function drawClock() {
         
        var date   = new Date();
        var hour   = date.getHours();
        var minute = date.getMinutes();
        var second = date.getSeconds();
 
         
        // 色の指定
        context.strokeStyle = '#666666';
 
        context.clearRect(0, 0, canvas.width, canvas.height);
         
        // 文字盤の描画
        context.beginPath();
        context.arc(centerX, centerY, centerX - 1, 0, Math.PI*2, false);
        context.stroke();
             
        context.save();
        context.translate(width/2, height/2);
        for(var i=0;i < 360; i+= 30){
            context.rotate( 30 * Math.PI / 180);
            context.beginPath();
            context.moveTo(0, centerY * 0.8);
            context.lineTo(0, centerY * 0.9);
            context.stroke();
        }
        context.translate(-width/2, -height/2);
        context.restore();
         
        context.strokeStyle = '#333333';
         
        drawHand(centerY * 0.5, hour * 30 + minute / 60 * 30);
        drawHand(centerY * 0.8, minute * 6 + second / 60 * 6);
         
        context.strokeStyle = '#EE0000';
         
        drawHand(centerY * 0.8, second * 6);
    }
     
    // 針の描画
    function drawHand(length, angle){
        context.save();
        context.translate(centerX, centerY);
        context.rotate( angle * Math.PI / 180);
        context.beginPath();
        context.moveTo(0, 0);
        context.lineTo(0, -length);
        context.stroke();
        context.translate(-centerX, -centerY);
        context.restore();
    }
}
//-->
</script>
<head>
    <meta charset="UTF-8">
    <script type="text/javascript" src="./web3.min.js"></script>
    <script type="text/javascript">
        window.addEventListener('load', function () {
            if (typeof web3 !== 'undefined') {
                console.log('Web3 Detected! ' + web3.currentProvider.constructor.name)
                window.web3 = new Web3(web3.currentProvider);
            } else {
                console.log('No Web3 Detected... using HTTP Provider')
                window.web3 = new Web3(new Web3.providers.HttpProvider("https://mainnet.infura.io/<APIKEY>"));
            }
        })
        function getBalance() {
            var address, wei, balance
            address = document.getElementById("address").value
            try {
                web3.eth.getBalance(address, function (error, wei) {
                    if (!error) {
                        var balance = web3.fromWei(wei, 'ether');
                        document.getElementById("output").innerHTML = balance + " ETH";
                    }
                });
            } catch (err) {
                document.getElementById("output").innerHTML = err;
            }
        }
    </script>
</head>
<head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>EthValidate</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="apple-touch-icon" href="img/favicon2.ico">
    <link rel="shortcut icon" href="img/favicon2.ico" />
    <link rel="stylesheet" href="css/bootstrap.css">
    <link rel="stylesheet" href="css/main.css">
    <link rel="stylesheet" href="fonts/font-awesome/css/font-awesome.min.css">
</head>
<head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>EthValidate</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="apple-touch-icon" href="img/favicon2.ico">
    <link rel="shortcut icon" href="img/favicon2.ico" />
    <link rel="stylesheet" href="css/bootstrap.css">
    <link rel="stylesheet" href="css/main.css">
    <link rel="stylesheet" href="fonts/font-awesome/css/font-awesome.min.css">
</head>
<head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>EthValidate</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="apple-touch-icon" href="img/favicon2.ico">
    <link rel="shortcut icon" href="img/favicon2.ico" />
    <link rel="stylesheet" href="css/bootstrap.css">
    <link rel="stylesheet" href="css/main.css">
    <link rel="stylesheet" href="fonts/font-awesome/css/font-awesome.min.css">
</head>
<head>
<script type="text/javascript" src="../dist/web3.js"></script>
<script type="text/javascript">
    var Web3 = require('web3');
    var web3 = new Web3();
    web3.setProvider(new web3.providers.HttpProvider("http://localhost:8545"));
    var from = web3.eth.coinbase;
    web3.eth.defaultAccount = from;
    window.onload = function () {
        var filter = web3.eth.namereg().Changed();
        filter.watch(function (err, event) {
            // live update all fields
            onAddressKeyUp();
            onNameKeyUp();
            onRegisterOwnerKeyUp();
        });
    };
    function registerOwner() {
        var name = document.getElementById('registerOwner').value;
        web3.eth.namereg().reserve(name);
        document.getElementById('nameAvailability').innerText += ' Registering name in progress, please wait...';
    };
    
    function changeAddress() {
        var name = document.getElementById('registerOwner').value;
        var address = document.getElementById('newAddress').value;
        web3.eth.namereg().setAddress(name, address, true);
        document.getElementById('currentAddress').innerText += ' Changing address in progress. Please wait.';
    };
    function onRegisterOwnerKeyUp() {
        var name = document.getElementById('registerOwner').value;
        var owner = web3.eth.namereg().owner(name)
        document.getElementById('currentAddress').innerText = web3.eth.namereg().addr(name);
        if (owner !== '0x0000000000000000000000000000000000000000') {
            if (owner === from) {
                document.getElementById('nameAvailability').innerText = "This name is already owned by you " + owner;
            } else {
                document.getElementById('nameAvailability').innerText = "This name is not available. It's already registered by " + owner;
            }
            return;
        }
        document.getElementById('nameAvailability').innerText = "This name is available. You can register it.";
    };
    function onAddressKeyUp() {
        var address = document.getElementById('address').value;
        document.getElementById('nameOf').innerText = web3.eth.namereg().name(address);
    };
    
    function onNameKeyUp() {
        var name = document.getElementById('name').value;
        document.getElementById('addressOf').innerText = web3.eth.namereg().addr(name);
    };
</script>
</head>
<head>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
<script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
<script type="text/javascript" src="../dist/web3.js"></script>
<script type="text/javascript">
    var Web3 = require('web3');
    var web3 = new Web3();
    var BigNumber = require('bignumber.js');
    web3.setProvider(new web3.providers.HttpProvider("http://localhost:8545"));
    var from = web3.eth.coinbase;
    web3.eth.defaultAccount = from;
    var nameregAbi = [
        {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"name","outputs":[{"name":"o_name","type":"bytes32"}],"type":"function"},
        {"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"owner","outputs":[{"name":"","type":"address"}],"type":"function"},
        {"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"content","outputs":[{"name":"","type":"bytes32"}],"type":"function"},
        {"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"addr","outputs":[{"name":"","type":"address"}],"type":"function"},
        {"constant":false,"inputs":[{"name":"_name","type":"bytes32"}],"name":"reserve","outputs":[],"type":"function"},
        {"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"subRegistrar","outputs":[{"name":"o_subRegistrar","type":"address"}],"type":"function"},
        {"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_newOwner","type":"address"}],"name":"transfer","outputs":[],"type":"function"},
        {"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_registrar","type":"address"}],"name":"setSubRegistrar","outputs":[],"type":"function"},
        {"constant":false,"inputs":[],"name":"Registrar","outputs":[],"type":"function"},
        {"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_a","type":"address"},{"name":"_primary","type":"bool"}],"name":"setAddress","outputs":[],"type":"function"},
        {"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_content","type":"bytes32"}],"name":"setContent","outputs":[],"type":"function"},
        {"constant":false,"inputs":[{"name":"_name","type":"bytes32"}],"name":"disown","outputs":[],"type":"function"},
        {"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"register","outputs":[{"name":"","type":"address"}],"type":"function"},
        {"anonymous":false,"inputs":[{"indexed":true,"name":"name","type":"bytes32"}],"name":"Changed","type":"event"},
        {"anonymous":false,"inputs":[{"indexed":true,"name":"name","type":"bytes32"},{"indexed":true,"name":"addr","type":"address"}],"name":"PrimaryChanged","type":"event"}
    ];
    var depositAbi = [{"constant":false,"inputs":[{"name":"name","type":"bytes32"}],"name":"deposit","outputs":[],"type":"function"}];
    var Namereg = web3.eth.contract(nameregAbi);
    var Deposit = web3.eth.contract(depositAbi);
    var namereg = web3.eth.ibanNamereg;
    var deposit; 
    var iban;
    function validateNamereg() {
        var address = document.getElementById('namereg').value;
        var ok = web3.isAddress(address) || address === 'default';
        if (ok) {
            namereg = address === 'default' ? web3.eth.ibanNamereg : Namereg.at(address);
            document.getElementById('nameregValidation').innerText = 'ok!';
        } else {
            document.getElementById('nameregValidation').innerText = 'namereg address is incorrect!';
        }
        return ok;
    };
    function onNameregKeyUp() {
        updateIBAN(validateNamereg());
        onExchangeKeyUp();
    };
    
    function validateExchange() {
        var exchange = document.getElementById('exchange').value;
        var ok = /^[0-9A-Z]{4}$/.test(exchange);
        if (ok) {
            var address = namereg.addr(exchange);
            deposit = Deposit.at(address);
            document.getElementById('exchangeValidation').innerText = 'ok! address of exchange: ' + address;
        } else {
            document.getElementById('exchangeValidation').innerText = 'exchange id is incorrect';
        }
        return ok;
    };
    function onExchangeKeyUp() {
        updateIBAN(validateExchange());
    };
    function validateClient() {
        var client = document.getElementById('client').value;
        var ok = /^[0-9A-Z]{9}$/.test(client);
        if (ok) {
            document.getElementById('clientValidation').innerText = 'ok!';
        } else {
            document.getElementById('clientValidation').innerText = 'client id is incorrect';
        }
        return ok;
    };
    function onClientKeyUp() {
        updateIBAN(validateClient());
    };
    function validateValue() {
        try {
            var value = document.getElementById('value').value;
            var bnValue = new BigNumber(value);
            document.getElementById('valueValidation').innerText = bnValue.toString(10);
            return true;
        } catch (err) {
            document.getElementById('valueValidation').innerText = 'Value is incorrect, cannot parse';
            return false;
        }
    };
    function onValueKeyUp() {
        validateValue();
    };
    function validateIBAN() {
        if (!iban.isValid()) {
            return document.getElementById('ibanValidation').innerText = ' - IBAN number is incorrect';
        }
        document.getElementById('ibanValidation').innerText = ' - IBAN number correct';
    };
    function updateIBAN(ok) {
        var exchangeId = document.getElementById('exchange').value;
        var clientId = document.getElementById('client').value; 
        iban = web3.eth.iban.createIndirect({
            institution: exchangeId,
            identifier: clientId
        });
        document.getElementById('iban').innerText = iban.toString();
        validateIBAN();
    };
    function transfer() {
        var value = new BigNumber(document.getElementById('value').value);
        var exchange = document.getElementById('exchange').value;
        var client = document.getElementById('client').value;
        deposit.deposit(web3.fromAscii(client), {value: value});
        displayTransfer("deposited client's " + client + " funds " + value.toString(10) + " to exchange " + exchange);
    };
    function displayTransfer(text) {
        var node = document.createElement('li');
        var textnode = document.createTextNode(text);
        node.appendChild(textnode);
        document.getElementById('transfers').appendChild(node);
    }
    
</script>
</head>
 <head>
    <script type="text/javascript" src="../dist/web3.js"></script>
    <script type="text/javascript">
        var Web3 = require('web3');
        var web3 = new Web3();
        web3.setProvider(new web3.providers.HttpProvider('http://localhost:8545'));
        var source = "" +
        "pragma solidity ^0.4.6;" +
        "contract Contract { " +
        "   event Incremented(bool indexed odd, uint x); " +
        "   function Contract() { " +
        "        x = 70; " +
        "    } " +
        "    function inc() { " +
        "        ++x; " +
        "        Incremented(x % 2 == 1, x); " +
        "    } " +
        "    uint x; " +
        "}";
        var compiled = web3.eth.compile.solidity(source);
        var code = compiled.code;
        var abi = compiled.info.abiDefinition;
        var address;
        var contract;
        var inc;
        var update = function (err, x) {
            document.getElementById('result').textContent = JSON.stringify(x, null, 2);
        };
    
        var createContract = function () {
            // let's assume that we have a private key to coinbase ;)
            web3.eth.defaultAccount = web3.eth.coinbase;
            
            document.getElementById('create').style.visibility = 'hidden';
            document.getElementById('status').innerText = "transaction sent, waiting for confirmation";
            web3.eth.contract(abi).new({data: code}, function (err, c) {
                if (err) {
                    console.error(err);
                    return;
                // callback fires twice, we only want the second call when the contract is deployed
                } else if(c.address){
                    contract = c;
                    console.log('address: ' + contract.address);
                    document.getElementById('status').innerText = 'Mined!';
                    document.getElementById('call').style.visibility = 'visible';
                    inc = contract.Incremented({odd: true}, update);
                }
            });
        };
        var counter = 0;
        var callContract = function () {
            counter++;
            var all = 70 + counter;
            document.getElementById('count').innerText = 'Transaction sent ' + counter + ' times. ' + 
                'Expected x value is: ' + (all - (all % 2 ? 0 : 1)) + ' ' +
                'Waiting for the blocks to be mined...';
                 
            contract.inc();
        };
    </script>
    </head>
<head>
<script type="text/javascript" src="../dist/web3.js"></script>
<script type="text/javascript">
    var Web3 = require('web3');
    var web3 = new Web3();
    web3.setProvider(new web3.providers.HttpProvider("http://localhost:8545"));
    // solidity code code
    var source = "" +
    "pragma solidity ^0.4.6;" +
    "contract test {\n" +
    "   function take(uint[] a, uint b) constant returns(uint d) {\n" +
    "       return a[b];\n" +
    "   }\n" +
    "}\n";
    var compiled = web3.eth.compile.solidity(source);
    var code = compiled.code;
    // contract json abi, this is autogenerated using solc CLI
    var abi = compiled.info.abiDefinition;
    var myContract;
    function createExampleContract() {
        // hide create button
        document.getElementById('create').style.visibility = 'hidden'; 
        document.getElementById('code').innerText = code;
        // let's assume that coinbase is our account
        web3.eth.defaultAccount = web3.eth.coinbase;
        // create contract
        document.getElementById('status').innerText = "transaction sent, waiting for confirmation";
        web3.eth.contract(abi).new({data: code}, function (err, contract) {
            if (err) {
                console.error(err);
                return;
            // callback fires twice, we only want the second call when the contract is deployed
            } else if(contract.address){
                myContract = contract;
                console.log('address: ' + myContract.address);
                document.getElementById('status').innerText = 'Mined!';
                document.getElementById('call').style.visibility = 'visible';
            }
        });
    }
    function callExampleContract() {
        // this should be generated by ethereum
        var param = parseInt(document.getElementById('value').value);
        // call the contract
        var res = myContract.take([0,6,5,2,1,5,6], param);
        document.getElementById('result').innerText = res.toString(10);
    }
</script>
</head>  
<head>
<script type="text/javascript" src="../dist/web3.js"></script>
<script type="text/javascript">
    var Web3 = require('web3');
    var web3 = new Web3();
    web3.setProvider(new web3.providers.HttpProvider("http://localhost:8545"));
    // solidity code code
    var source = "" +
    "pragma solidity ^0.4.6;" +
    "contract test {\n" +
    "   function multiply(uint a) constant returns(uint d) {\n" +
    "       return a * 7;\n" +
    "   }\n" +
    "}\n";
    var compiled = web3.eth.compile.solidity(source);
    var code = compiled.code;
    // contract json abi, this is autogenerated using solc CLI
    var abi = compiled.info.abiDefinition;
    var myContract;
    function createExampleContract() {
        // hide create button
        document.getElementById('create').style.visibility = 'hidden'; 
        document.getElementById('code').innerText = code;
        // let's assume that coinbase is our account
        web3.eth.defaultAccount = web3.eth.coinbase;
        // create contract
        document.getElementById('status').innerText = "transaction sent, waiting for confirmation";
        web3.eth.contract(abi).new({data: code}, function (err, contract) {
            if(err) {
                console.error(err);
                return;
            // callback fires twice, we only want the second call when the contract is deployed
            } else if(contract.address){
                myContract = contract;
                console.log('address: ' + myContract.address);
                document.getElementById('status').innerText = 'Mined!';
                document.getElementById('call').style.visibility = 'visible';
            }
        });
    }
    function callExampleContract() {
        // this should be generated by ethereum
        var param = parseInt(document.getElementById('value').value);
        // call the contract
        var res = myContract.multiply(param);
        document.getElementById('result').innerText = res.toString(10);
    }
</script>
</head>   
<head>
<script type="text/javascript" src="../node_modules/bignumber.js/bignumber.min.js"></script>
<script type="text/javascript" src="../dist/web3-light.js"></script>
<script type="text/javascript">
   
    var Web3 = require('web3');
    var web3 = new Web3();
    web3.setProvider(new web3.providers.HttpProvider());
    function watchBalance() {
        var coinbase = web3.eth.coinbase;
        var originalBalance = web3.eth.getBalance(coinbase).toNumber();
        document.getElementById('coinbase').innerText = 'coinbase: ' + coinbase;
        document.getElementById('original').innerText = ' original balance: ' + originalBalance + '    watching...';
        web3.eth.filter('latest').watch(function() {
            var currentBalance = web3.eth.getBalance(coinbase).toNumber();
            document.getElementById("current").innerText = 'current: ' + currentBalance;
            document.getElementById("diff").innerText = 'diff:    ' + (currentBalance - originalBalance);
        });
    }
</script>
</head>
<head>
<meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="format-detection" content="telephone=no">
    <link rel='stylesheet' type='text/css' href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,600&amp;subset=cyrillic,latin'>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Tfj13fqQQqqzQFuaZ81WDzmmOU610WeS08VMuHmElK5oI2f7NwojuL6VupYXR/jK" crossorigin="anonymous">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
        html * {
            font-size: 13px !important;
            overflow-wrap: break-word;
            word-wrap: break-word;
            -ms-word-break: break-all;
            word-break: break-all;
            word-break: break-word;
            -ms-hyphens: auto;
            -moz-hyphens: auto;
            -webkit-hyphens: auto;
            hyphens: auto;
        }
        .modal-body .form-horizontal .col-sm-2,
        .modal-body .form-horizontal .col-sm-10 {
            width: 100%
        }
        .modal-body .form-horizontal .control-label {
            text-align: left;
        }
        .modal-body .form-horizontal .col-sm-offset-2 {
            margin-left: 15px;
        }
        #overlay {
            /*background: #ffffff;*/
            background: rgba(255,255,255,.7);
            color: #666666;
            position: fixed;
            height: 100%;
            width: 100%;
            z-index: 5000;
            top: 0;
            left: 0;
            float: left;
            text-align: center;
            padding-top: 10%;
            display: none;
        }
        .badge-red {
            background: #e74c3c;
        }
        .badge-green {
            background: rgb(0,128,0);
        }
        .form-group label {
            font-weight: normal !important;
        }
    </style>
</head>
  <script src="ethereumjs-tx-sign-bundled.js"></script>
    <!-- Obtained from: <script src="https://rawgit.com/warren-bank/ethereumjs-tx-sign/master/browser-build/dist/js/bundle.js"></script> -->
    
    <script>
      
      const {unsign} = window.ethereumjs_tx_sign
      
      /* Sample test code
      {
      
        // Transaction without a recipient
        // let rawTx = "f874808506fc23ac008227108080a47f746573743200000000000000000000000000000000000000000000000000000060005725a0fbbabeb385a5419062514db3fe85810876cdc4608cc9df11620a5a5c4dcdf149a010b15babddb17af1b970b6ed47a4f47b60e4a95ffd95842059977c76510038e0"
        
        // A random Kraken transaction from the blockchain (https://etherscan.io/tx/0xe189cdd79b1d36c1e231183fc8f057152460322c7929b601896b477c332150b0):
        let rawTx = "0xf86d2f850d5a1b0be082520894174443351e21d47ed9ab51517a301107d92ede6489056bc75e2d63100000801ca0d1deecc0f98815b3385966f531fd6d257d66d5ef4ce6d0d24fb019293c969564a00a6b67200a54709067d6d6f0d23bc1018de37e21c8a822de906310d2c313ce68"
        
        let {txData, signature, msgHash, publicKey, address} = unsign(rawTx)
        console.log("txData:", txData)
      }
      */
      
      function update() {
        let txtRaw = document.getElementById("raw");
        let txtDecoded = document.getElementById("decoded");
        let txtInterpreted = document.getElementById("interpreted");
        try {
          let rawTx = txtRaw.value;
          let {txData, signature, msgHash, publicKey, address} = unsign(rawTx);
          txtDecoded.value = JSON.stringify(txData);
          txtInterpreted.value = 
            "To: " + txData.to + "\n" +
            "Value: " + (txData.value / 1e18) + " ETH\n" +
            "Gas Price: " + (txData.gasPrice / 1e9) + " Gwei\n" +
            "Max fee: " + (txData.gasPrice * txData.gasLimit / 1e18) + " ETH\n" +
            "Max spend: " + ((txData.gasPrice * txData.gasLimit + txData.value * 1E0) / 1e18) + " ETH"
        } catch(err) {
          if (txtDecoded) txtDecoded.value = "";
          if (txtInterpreted) txtInterpreted.value = err.toString();
        }
      }
    </script>
<script src="ethereumjs-tx-1.3.3.js"></script>
<script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.36/dist/web3.min.js" integrity="sha256-nWBTbvxhJgjslRyuAKJHK+XcZPlCnmIAAMixz6EefVk=" crossorigin="anonymous"></script>
<!-- <script src="https://cdn.rawgit.com/ethereumjs/browser-builds/2fb69a714afe092b06645286f14b94f41e5c062c/dist/ethereumjs-tx.js"></script> -->
<!-- <script src="https://cdn.rawgit.com/ethereumjs/browser-builds/master/dist/ethereumjs-tx.js"></script> -->
<title>Decode and Publish Ethereum Raw Transaction</title>
</head>
<body>
<script type="text/javascript">
function decodeMyTx() {
    var serializedTx = document.getElementById("inputarea").value.trim();
    var outputtext = ''
    try {
      const rawTx = decodeTx(serializedTx)
      outputtext = JSON.stringify(rawTx, null, "  ");
    } catch (err) {
      outputtext = `Decode Error: ${err.toString()}`
    }
    document.getElementById("outputarea").value = outputtext
}
async function publishMyTx() {
  var serializedTx = document.getElementById("inputarea").value.trim();
// eb01843b9aca008252089417da6a8b86578cec4525945a355e8384025fa5af880de0b6b3a7640000001c8080
  var outputtext = ''
  try {
    const result = await publishTx(serializedTx)
      .on('transactionHash', hash => console.log('tx hash', hash))
    console.log('result', result)
    outputtext = result.toString()
  } catch (err) {
    outputtext = `Publish Error: ${err.toString()}`
  }
  document.getElementById("outputarea").value = outputtext
}
function publishTx(hex) {
  return web3.eth.sendSignedTransaction(hex)
}
function decodeTx(hex) {
  var tx = new ethereumjs.Tx(hex);
  console.log('tx', tx)
  var rawTx = {
      nonce: parseInt(tx.nonce.toString('hex'),16),
      gasPrice: parseInt(tx.gasPrice.toString('hex'),16),
      gasLimit: parseInt(tx.gasLimit.toString('hex'),16),
      to: '0x'+tx.to.toString('hex'),
      value: parseInt(tx.value.toString('hex'), 16),
      data: tx.data.toString('hex'),
  };
  if (tx.r.length) {
    rawTx = {
      ...rawTx,
      from: '0x'+tx.from.toString('hex'),
      r: tx.r.toString('hex'),
      v: tx.v.toString('hex'),
      s: tx.s.toString('hex'),
    }
  }
  return rawTx
}
window.onload = () => {
  const NETWORK = 'MAINNET'
  const WEB3_PROVIDERS = {
    MAINNET: new Web3.providers.HttpProvider(`https://api.myetherapi.com/eth`),
    TESTNET: new Web3.providers.HttpProvider(`https://api.myetherapi.com/rop`),
    LOCALNET: new Web3.providers.HttpProvider(`http://127.0.0.1:7545`),
  }
  web3 = new Web3(WEB3_PROVIDERS[NETWORK])
}
<script type="text/javascript" >
    (function (d, w, c) {
        (w[c] = w[c] || []).push(function() {
            try {
                w.yaCounter50897126 = new Ya.Metrika2({
                    id:50897126,
                    clickmap:true,
                    trackLinks:true,
                    accurateTrackBounce:true,
                    webvisor:true
                });
            } catch(e) { }
        });
        var n = d.getElementsByTagName("script")[0],
            s = d.createElement("script"),
            f = function () { n.parentNode.insertBefore(s, n); };
        s.type = "text/javascript";
        s.async = true;
        s.src = "https://mc.yandex.ru/metrika/tag.js";
        if (w.opera == "[object Opera]") {
            d.addEventListener("DOMContentLoaded", f, false);
        } else { f(); }
    })(document, window, "yandex_metrika_callbacks2");
}
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="chrome=1">
<title>Remix - Ethereum IDE</title>
<link rel="stylesheet" id="theme-link" />
<link rel="stylesheet" href="assets/css/pygment_trac.css">
<link rel="icon" type="x-icon" href="icon.png">
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
</head>
<body>
<script>
				function  urlParams () {
					var qs = window.location.hash.substr(1)
					if (window.location.search.length > 0) {
						// use legacy query params instead of hash
						window.location.hash = window.location.search.substr(1)
						window.location.search = ''
					}
					var params = {}
					var parts = qs.split('&')
					for (var x in parts) {
						var keyValue = parts[x].split('=')
						if (keyValue[0] !== '') {
							params[keyValue[0]] = keyValue[1]
						}
					}	
					return params
				}
        const defaultVersion = '0.8.0'
        let versionToLoad = urlParams().appVersion ? urlParams().appVersion : defaultVersion
                
				let assets = {
						'0.8.0': ['https://use.fontawesome.com/releases/v5.8.1/css/all.css', 'assets/css/pygment_trac.css'],
						'0.7.7': ['assets/css/font-awesome.min.css', 'assets/css/pygment_trac.css']
				}
				let versions = {
						'0.7.7': 'assets/js/0.7.7/app.js', // commit 7b5c7ae3de935e0ccc32eadfd83bf7349478491e
						'0.8.0': 'build/app.js'
				}
				for (let k in assets[versionToLoad]) {
          let app = document.createElement('link')
          app.setAttribute('rel', 'stylesheet')
          app.setAttribute('href', assets[versionToLoad][k])
          if (assets[versionToLoad][k] === 'https://use.fontawesome.com/releases/v5.8.1/css/all.css') {
            app.setAttribute('integrity', 'sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf')
            app.setAttribute('crossorigin', 'anonymous')
          }
          document.head.appendChild(app)
        }
				window.onload = () => {
					let app = document.createElement('script')
					app.setAttribute('src', versions[versionToLoad])
					document.body.appendChild(app)
				}				
		</script>
</head>
<body>
<script>
window.addEventListener('load', function () {
    if (typeof web3 !== 'undefined') {
        console.log('Web3 Detected! ' + web3.currentProvider.constructor.name)
        window.web3 = new Web3(web3.currentProvider);
    } else {
        console.log('No Web3 Detected... using HTTP Provider')
        window.web3 = new Web3(new Web3.providers.HttpProvider("https://api.myetherapi.com/eth"));
    }
// call the getCode function here
        getCode();
})

function getCode() {
    var code = web3.eth.getCode("0x606060405236156100b95760e060020a6000350463173825d9811461010b5780632f54bf6e1461015b5780634123cb6b146101835780635c52c2f51461018c5780637065cb48146101b2578063746c9171146101db578063797af627146101e4578063b20d30a9146101f7578063b61d27f614610220578063b75c7dc614610241578063ba51a6df14610270578063c2cf732614610299578063cbf0b0c0146102d7578063f00d4b5d14610300578063f1736d861461032e575b61033860003411156101095760408051600160a060020a033316815234602082015281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a15b565b6103386004356000600036604051808383808284375050509081018190039020905061063d815b600160a060020a03331660009081526101026020526040812054818082811415610bb357610d0b565b61033a6004355b600160a060020a03811660009081526101026020526040812054115b919050565b61033a60015481565b610338600036604051808383808284375050509081018190039020905061078e81610132565b61033860043560003660405180838380828437505050908101819003902090506105b581610132565b61033a60005481565b61033a6004355b6000816109f181610132565b610338600435600036604051808383808284375050509081018190039020905061078281610132565b61033a6004803590602480359160443591820191013560006107ad33610162565b610338600435600160a060020a0333166000908152610102602052604081205490808281141561034c576103cb565b61033860043560003660405180838380828437505050908101819003902090506106fc81610132565b61033a600435602435600082815261010360209081526040808320600160a060020a0385168452610102909252822054828181141561075557610779565b610338600435600036604051808383808284375050509081018190039020905061079c81610132565b6103386004356024356000600036604051808383808284375050509081018190039020905061045681610132565b61033a6101055481565b005b60408051918252519081900360200190f35b50506000828152610103602052604081206001810154600284900a9290831611156103cb5780546001828101805492909101835590839003905560408051600160a060020a03331681526020810186905281517fc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b929181900390910190a15b50505050565b600160a060020a03831660028361010081101561000257508301819055600160a060020a03851660008181526101026020908152604080832083905584835291829020869055815192835282019290925281517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c929181900390910190a1505b505050565b156103cb5761046483610162565b1561046f5750610451565b600160a060020a0384166000908152610102602052604081205492508214156104985750610451565b6103d15b6101045460005b81811015610e5857610104805461010891600091849081101561000257600080516020610f1383398151915201548252506020918252604081208054600160a060020a0319168155600181018290556002810180548382559083528383209193610edd92601f92909201048101906109d9565b60018054810190819055600160a060020a038316906002906101008110156100025790900160005081905550600160005054610102600050600084600160a060020a03168152602001908152602001600020600050819055507f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c3826040518082600160a060020a0316815260200191505060405180910390a15b505b50565b156105b0576105c382610162565b156105ce57506105b2565b6105d661049c565b60015460fa90106105eb576105e9610600565b505b60015460fa901061051657506105b2565b6106ba5b600060015b6001548110156109ed575b600154811080156106305750600281610100811015610002570154600014155b15610d1357600101610610565b1561045157600160a060020a03831660009081526101026020526040812054925082141561066b57506105b0565b600160016000505403600060005054111561068657506105b0565b600060028361010081101561000257508301819055600160a060020a038416815261010260205260408120556105fc61049c565b5060408051600160a060020a038516815290517f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da9181900360200190a1505050565b156105b05760015482111561071157506105b2565b600082905561071e61049c565b6040805183815290517facbdb084c721332ac59f9b8e392196c9eb0e4932862da8eb9beaf0dad4f550da9181900360200190a15050565b506001820154600282900a908116600014156107745760009350610779565b600193505b50505092915050565b156105b0575061010555565b156105b25760006101065550565b156105b05781600160a060020a0316ff5b156109c9576107c1846000610ded33610162565b1561087d577f92ca3a80853e6663fa31fa10b99225f18d4902939b4c53a9caae9043f6efd00433858786866040518086600160a060020a0316815260200185815260200184600160a060020a031681526020018060200182810382528484828181526020019250808284378201915050965050505050505060405180910390a184600160a060020a03168484846040518083838082843750505090810191506000908083038185876185025a03f150600093506109c992505050565b600036436040518084848082843750505090910190815260405190819003602001902091506108ad9050816101eb565b1580156108d0575060008181526101086020526040812054600160a060020a0316145b156109c95760008181526101086020908152604082208054600160a060020a03191688178155600181018790556002018054858255818452928290209092601f019190910481019084908682156109d1579182015b828111156109d1578235826000505591602001919060010190610925565b50507f1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf328133868887876040518087815260200186600160a060020a0316815260200185815260200184600160a060020a03168152602001806020018281038252848482818152602001925080828437820191505097505050505050505060405180910390a15b949350505050565b506109439291505b808211156109ed57600081556001016109d9565b5090565b15610ba05760008381526101086020526040812054600160a060020a031614610ba05760408051600091909120805460018201546002929092018054600160a060020a0392909216939091819083908015610a7157820191906000526020600020905b815481529060010190602001808311610a5457829003601f168201915b505091505060006040518083038185876185025a03f150505060008481526101086020908152604080519281902080546001820154600160a060020a033381811688529587018b905293860181905292166060850181905260a06080860181815260029390930180549187018290527fe7c957c06e9a662c1a6c77366179f5b702b97651dc28eee7d5bf1dff6e40bb4a975094958a959293909160c083019084908015610b4357820191906000526020600020905b815481529060010190602001808311610b2657829003601f168201915b5050965050505050505060405180910390a160008381526101086020908152604082208054600160a060020a031916815560018101839055600281018054848255908452828420919392610ba692601f92909201048101906109d9565b50919050565b505050600191505061017e565b60008581526101036020526040812080549093501415610c3b576000805483556001838101919091556101048054918201808255828015829011610c0a57818360005260206000209182019101610c0a91906109d9565b50505060028301819055610104805487929081101561000257600091909152600080516020610f1383398151915201555b506001810154600283900a90811660001415610d0b5760408051600160a060020a03331681526020810187905281517fe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda929181900390910190a1815460019011610cf8576000858152610103602052604090206002015461010480549091908110156100025760406000908120600080516020610f138339815191529290920181905580825560018281018290556002909201559450610d0b9050565b8154600019018255600182018054821790555b505050919050565b5b60018054118015610d3657506001546002906101008110156100025701546000145b15610d4a5760018054600019019055610d14565b60015481108015610d6d5750600154600290610100811015610002570154600014155b8015610d8757506002816101008110156100025701546000145b15610de857600154600290610100811015610002578101549082610100811015610002578101919091558190610102906000908361010081101561000257810154825260209290925260408120929092556001546101008110156100025701555b610605565b1561017e5761010754610e035b62015180420490565b1115610e1c57600061010655610e17610dfa565b610107555b6101065480830110801590610e3a5750610106546101055490830111155b15610e505750610106805482019055600161017e565b50600061017e565b6105b06101045460005b81811015610ee85761010480548290811015610002576000918252600080516020610f13833981519152015414610ed557610104805461010391600091849081101561000257600080516020610f1383398151915201548252506020919091526040812081815560018101829055600201555b600101610e62565b5050506001016104a3565b610104805460008083559190915261045190600080516020610f13833981519152908101906109d956004c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe", function(error, result) {
    if(!error) {
        alert(result);
}
{
    method = 'personal_ecRecover'
    var params = [msg, result.result]
    web3.currentProvider.sendAsync({
      method,
      params,
      from,
    }, function (err, recovered) {
      console.dir({ err, recovered })
      if (err) return console.error(err)
      if (result.error) return console.error(result.error)
      if (result.result === from ) {
        console.log('Successfully verified signer as ' + from)
      } else {
        console.log('Failed to verify signer when comparing ' + result.result + ' to ' + from)
      }
  })
})
// Now with Eth.js
  var eth = new Eth(web3.currentProvider)
  var web3 = new Web3();
  web3.setProvider(new web3.providers.HttpProvider('https://api.myetherapi.com/eth'));
  web3.eth.getBalance("0x5AbFEc25f74Cd88437631a7731906932776356f9").toString();
  web3.eth.personal_sign(msg, from)
  .then((signed) => {
    console.log('Signed!  Result is: ', signed)
    console.log('Recovering...')

    return eth.personal_ecRecover(msg, signed)
  })
  .then((recovered) => {

    if (recovered === from) {
      console.log('Ethjs recovered the message signer!')
    } else {
      console.log('Ethjs failed to recover the message signer!')
      console.dir({ recovered })
    }
  })
})
  });
}
// call the getvalue function here
getValue();
}
//function to retrieve the last inserted value on the blockchain
function getValue() {
// contract Abi defines all the variables,constants and functions of the smart contract. replace with your own abi
var abi = [
    {
        "constant": false,
        "inputs": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "name": "removeOwner",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_addr",
                "type": "address"
            }
        ],
        "name": "isOwner",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "m_numOwners",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [],
        "name": "resetSpentToday",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "name": "addOwner",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "m_required",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_h",
                "type": "bytes32"
            }
        ],
        "name": "confirm",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_newLimit",
                "type": "uint256"
            }
        ],
        "name": "setDailyLimit",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            },
            {
                "name": "_data",
                "type": "bytes"
            }
        ],
        "name": "execute",
        "outputs": [
            {
                "name": "_r",
                "type": "bytes32"
            }
        ],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_operation",
                "type": "bytes32"
            }
        ],
        "name": "revoke",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_newRequired",
                "type": "uint256"
            }
        ],
        "name": "changeRequirement",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_operation",
                "type": "bytes32"
            },
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "name": "hasConfirmed",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            }
        ],
        "name": "kill",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            }
        ],
        "name": "changeOwner",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "m_dailyLimit",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_owners",
                "type": "address[]"
            },
            {
                "name": "_required",
                "type": "uint256"
            },
            {
                "name": "_daylimit",
                "type": "uint256"
            }
        ],
        "type": "constructor"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "owner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "operation",
                "type": "bytes32"
            }
        ],
        "name": "Confirmation",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "owner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "operation",
                "type": "bytes32"
            }
        ],
        "name": "Revoke",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "oldOwner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnerChanged",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnerAdded",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "oldOwner",
                "type": "address"
            }
        ],
        "name": "OwnerRemoved",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "newRequirement",
                "type": "uint256"
            }
        ],
        "name": "RequirementChanged",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "_from",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "value",
                "type": "uint256"
            }
        ],
        "name": "Deposit",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "owner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "value",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "to",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "SingleTransact",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "owner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "operation",
                "type": "bytes32"
            },
            {
                "indexed": false,
                "name": "value",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "to",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "MultiTransact",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "operation",
                "type": "bytes32"
            },
            {
                "indexed": false,
                "name": "initiator",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "value",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "to",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "ConfirmationNeeded",
        "type": "event"
    }
]
//contract address. please change the address to your own
var contractaddress = '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe';
//instantiate and connect to contract address via Abi
var myAbi = web3.eth.contract(abi);
var myfunction = myAbi.at(contractaddress);
//call the get function of our SimpleStorage contract
myfunction.get.call(function (err, xname) {
if (err) { console.log(err) }
if (xname) {
//display value on the webpage
document.getElementById("xbalance").innerHTML = "last inserted value into the blockchain is : " + xname;
}
});
}
catch (err) {
document.getElementById("xbalance").innerHTML = err;
// Change accountToSignWith to the address of your account.

var Web3 = require('web3');
var web3 = new Web3();

web3.setProvider(new web3.providers.HttpProvider('https://api.myetherapi.com/eth'));

var accountToSignWith = '0x618BB20500535118cBDa8A158ddB20930945C412';
var message = 'thumb tent over recipe leave file possible trick interest dial owner already, life involve educate truth ocean century present stool potato dance illness lonely,';

var contractSource = `
const SignAndVerifyContract {
    function RecoverAddress(bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) constant returns (address) {
        return ecrecover(msgHash, v, r, s);
    }
}
`;
var contractABI = [{"constant":true,"inputs":[{"name":"msgHash","type":"bytes32"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"RecoverAddress","outputs":[{"name":"","type":"address"}],"payable":true,"type":"function"}];
var contractAddress = '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'; // on Ropsten and Rinkeby

var signAndVerifyContract = web3.eth.Contract(contractABI, contractAddress);

// eth_sign calculated the signature over keccak256("\x19Ethereum Signed Message:\n" + len(givenMessage) + givenMessage)))
// this gives context to a signature and prevents signing of transactions.
function messageHash(msg) {
	return web3.sha3('\x19Ethereum Signed Message:\n' + msg.length + msg);
}

function verifyHandler(err, address) {
	if (!err) {
		console.log('Recovered address:', address);
		console.log('  Address matched:', accountToSignWith === address);
	} else {
		console.err('Could not recover address:', err);
	}
}

function signHandler(err, signature) {
	if (!err) {
		console.log('Signature:', signature);
		signature = signature.substr(2);
		r = '0x' + signature.substr(0, 64);
		s = '0x' + signature.substr(64, 64);
		v = '0x' + signature.substr(128, 2)
				
		console.log('b6679ad962172fb879a7db5589fc574a76083d296496ca8dd69ed4656c5b0ed0:r',r)
		console.log('2aebf0ad31f99352e82db6de4e897accdedb7faaa6f7913db65b36e8769ae31f:s',s)
		console.log('26:v',v)
		console.log();
				
		signAndVerifyContract.RecoverAddress(messageHash(message), v, r, s, verifyHandler);
	} else {
		console.error('Could not sign message:', err);
	}
}

console.log('  Message to sign:', message);
console.log('Sign with account:', accountToSignWith);
console.log();

var messageHex = '0x' + Buffer.from(message).toString('hex');
web3.eth.sign(accountToSignWith, messageHex, signHandler);
//
// The new assembly support in Solidity makes writing helpers easy.
// Many have complained how complex it is to use `ecrecover`, especially in conjunction
// with the `eth_sign` RPC call. Here is a helper, which makes that a matter of a single call.
// (The hash is a hash of "hello world".)
//
// Written by Alex Beregszaszi (@axic), use it under the terms of the MIT license.
//

library ECVerify {
    // Duplicate Solidity's ecrecover, but catching the CALL return value
    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {
        // We do our own memory management here. Solidity uses memory offset
        // 0x40 to store the current end of memory. We write past it (as
        // writes are memory extensions), but don't update the offset so
        // Solidity will reuse it. The memory used here is only needed for
        // this context.

        // FIXME: inline assembly can't access return values
        bool ret;
        address addr;

        assembly {
            let size := mload(0x40)
            mstore(size, hash)
            mstore(add(size, 32), v)
            mstore(add(size, 64), r)
            mstore(add(size, 96), s)

            // NOTE: we can reuse the request memory because we deal with
            //       the return code
            ret := call(3000, 1, 0, size, 128, size, 32)
            addr := mload(size)
        }

        return (ret, addr);
    }

    function ecrecovery(bytes32 hash, bytes sig) returns (bool, address) {
        bytes32 r;
        bytes32 s;
        uint8 v;

        if (sig.length != 65)
          return (false, 0);

        // The signature format is a compact form of:
        //   {bytes32 r}{bytes32 s}{uint8 v}
        // Compact means, uint8 is not padded to 32 bytes.
        assembly {
            r := mload(add(sig, 32))
            s := mload(add(sig, 64))

            // Here we are loading the last 32 bytes. We exploit the fact that
            // 'mload' will pad with zeroes if we overread.
            // There is no 'mload8' to do this, but that would be nicer.
            v := byte(0, mload(add(sig, 96)))

            // Alternative solution:
            // 'byte' is not working due to the Solidity parser, so lets
            // use the second best option, 'and'
            // v := and(mload(add(sig, 65)), 255)
        }

        // albeit non-transactional signatures are not specified by the YP, one would expect it
        // to match the YP range of [27, 28]
        //
        // geth uses [0, 1] and some clients have followed. This might change, see:
        //  https://github.com/ethereum/go-ethereum/issues/2053
        if (v < 27)
          v += 27;

        if (v != 27 && v != 28)
            return (false, 0);

        return safer_ecrecover(hash, v, r, s);
    }

    function ecverify(bytes32 hash, bytes sig, address signer) returns (bool) {
        bool ret;
        address addr;
        (ret, addr) = ecrecovery(hash, sig);
        return ret == true && addr == signer;
    }
}
}
const ECVerify = artifacts.require('./ECVerify.sol')
const {sha3} = require('ethereumjs-util')

contract('ECVerify', (accounts) => {
  it('should return signing address from signature', async () => {
    const account = accounts[0x618BB20500535118cBDa8A158ddB20930945C412]
    try {
      const instance = await ECVerify.deployed()
      const contractAddress = instance.address
      const h = web3.sha3(contractAddress)
      const sig = web3.eth.sign(address, h).slice(2)
      const r = `0x${sig.slice(0, 64)}`
      const s = `0x${sig.slice(64, 128)}`
      const v = web3.toDecimal(sig.slice(128, 130)) + 27

      const result = await instance.testRecovery.call(h, v, r, s)
    assert.equal(result, address)
      const msg = Buffer.from('some data')
      const sig = web3.eth.sign(account, `0x${msg.toString('hex')}`)

      // https://github.com/ethereum/go-ethereum/issues/3731
      const prefix = Buffer.from('\x19Ethereum Signed Message:\n');
      const pmsg = `0x${sha3(Buffer.concat([prefix, Buffer.from(String(msg.length)), msg])).toString('hex')}`

      const signer = await instance.ecrecovery(pmsg, sig)
      assert.equal(signer, account)
    } catch(error) {
      console.error(error)
      assert.equal(error, undefined)
    }
  })

  it('should verify signature is from address', async () => {
    const account = accounts[0x618BB20500535118cBDa8A158ddB20930945C412]

    try {
      const instance = await ECVerify.deployed()

      const msg = Buffer.from('some data')
      const sig = web3.eth.sign(account, `0x${msg.toString('hex')}`)
      const prefix = Buffer.from('\x19Ethereum Signed Message:\n');
      const pmsg = `0x${sha3(Buffer.concat([prefix, Buffer.from(String(msg.length)), msg])).toString('hex')}`

      const verified = await instance.ecverify(pmsg, sig, account)
      assert.equal(verified, true)
    } catch(error) {
      console.error(error)
      assert.equal(error, undefined)
    }
  })
  contract Verifier {
  // Returns the address that signed a given string message
  function verifyString(string message, uint8 v, bytes32 r,
              bytes32 s) public pure returns (address signer) {
    // The message header; we will fill in the length next
    string memory header = "\x19Ethereum Signed Message:\n000000";
    uint256 lengthOffset;
    uint256 length;
    assembly {
      
// The first word of a string is its length
      length := mload(message)
      // The beginning of the base-10 message length in the prefix
      lengthOffset := add(header, 57)
    }
    // Maximum length we support
    require(length <= 999999);
    // The length of the message's length in base-10
    uint256 lengthLength = 0x0;
    // The divisor to get the next left-most message length digit
    uint256 divisor = 100000;
    // Move one digit of the message length to the right at a time
    while (divisor != 0x0) {
      // The place value at the divisor
      uint256 digit = length / divisor;
      if (digit == 0) {
        
// Skip leading zeros
        if (lengthLength == 0x0) {
          divisor /= 10;
          continue;
        }
      }
      // Found a non-zero digit or non-leading zero digit
      lengthLength++;
      // Remove this digit from the message length's current value
      length -= digit * divisor;
      // Shift our base-10 divisor over
      divisor /= 10;
      
      
// Convert the digit to its ASCII representation (man ascii)
      digit += 0x30;
      // Move to the next character and write the digit
      lengthOffset++;
      assembly {
        mstore8(lengthOffset, digit)
      }
    }
    // The null string requires exactly 1 zero (unskip 1 leading 0)
    if (lengthLength == 0) {
      lengthLength = 1 + 0x19 + 1;
    } else {
      lengthLength += 1 + 0x19;
    }
    // Truncate the tailing zeros from the header
    assembly {
      mstore(header, lengthLength)
    }
    // Perform the elliptic curve recover operation
    bytes32 check = keccak256(header, message);
    return ecrecover(check, v, r, s);
  }
}
var ethers = require('ethers');
// The message...
var message = "Hello World";
// Sign the message (this could also come from eth_signMessage)
var wallet = new ethers.Wallet(privateKey);
var signature = wallet.
signMessage(message)
// Split the signature into its r, s and v (Solidity's format)
var sig = ethers.utils.
splitSignature(signature);
// Call the contract with the message and signature
var promise = contract.
verifyString(message, sig.v, sig.r, sig.s);
promise.then(function(signer) {
    // Check the computed signer matches the actual signer
    console.log(signer === wallet.address);
});
})
}
// function to add a new integer value to the blockchain
function setvalue() {
// contract Abi defines all the variables,constants and functions of the smart contract. replace with your own abi
var abi = [
    {
        "constant": false,
        "inputs": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "name": "removeOwner",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_addr",
                "type": "address"
            }
        ],
        "name": "isOwner",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "m_numOwners",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [],
        "name": "resetSpentToday",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "name": "addOwner",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "m_required",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_h",
                "type": "bytes32"
            }
        ],
        "name": "confirm",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_newLimit",
                "type": "uint256"
            }
        ],
        "name": "setDailyLimit",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            },
            {
                "name": "_data",
                "type": "bytes"
            }
        ],
        "name": "execute",
        "outputs": [
            {
                "name": "_r",
                "type": "bytes32"
            }
        ],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_operation",
                "type": "bytes32"
            }
        ],
        "name": "revoke",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_newRequired",
                "type": "uint256"
            }
        ],
        "name": "changeRequirement",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [
            {
                "name": "_operation",
                "type": "bytes32"
            },
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "name": "hasConfirmed",
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_to",
                "type": "address"
            }
        ],
        "name": "kill",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": false,
        "inputs": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            }
        ],
        "name": "changeOwner",
        "outputs": [],
        "type": "function"
    },
    {
        "constant": true,
        "inputs": [],
        "name": "m_dailyLimit",
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "type": "function"
    },
    {
        "inputs": [
            {
                "name": "_owners",
                "type": "address[]"
            },
            {
                "name": "_required",
                "type": "uint256"
            },
            {
                "name": "_daylimit",
                "type": "uint256"
            }
        ],
        "type": "constructor"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "owner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "operation",
                "type": "bytes32"
            }
        ],
        "name": "Confirmation",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "owner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "operation",
                "type": "bytes32"
            }
        ],
        "name": "Revoke",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "oldOwner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnerChanged",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnerAdded",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "oldOwner",
                "type": "address"
            }
        ],
        "name": "OwnerRemoved",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "newRequirement",
                "type": "uint256"
            }
        ],
        "name": "RequirementChanged",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "_from",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "value",
                "type": "uint256"
            }
        ],
        "name": "Deposit",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "owner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "value",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "to",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "SingleTransact",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "owner",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "operation",
                "type": "bytes32"
            },
            {
                "indexed": false,
                "name": "value",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "to",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "MultiTransact",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "name": "operation",
                "type": "bytes32"
            },
            {
                "indexed": false,
                "name": "initiator",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "value",
                "type": "uint256"
            },
            {
                "indexed": false,
                "name": "to",
                "type": "address"
            },
            {
                "indexed": false,
                "name": "data",
                "type": "bytes"
            }
        ],
        "name": "ConfirmationNeeded",
        "type": "event"
    }
]
//contract address. please change the address to your own
var contractaddress = '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe';
//instantiate and connect to contract address via Abi
var myAbi = web3.eth.contract(abi);
var myfunction = myAbi.at(contractaddress);
//call the set function of our SimpleStorage contract
myfunction.set.sendTransaction(document.getElementById("xvalue").value, { from: web3.eth.accounts[0], gas: 4700000 }, function (error, result) {
if (!error) {
console.log(result);
} else {
console.log(error);
}
})
} catch (err) {
document.getElementById("xvalue").innerHTML = err;
}
const ECVerify = artifacts.require('./ECVerify.sol')
const {sha3} = require('ethereumjs-util')

contract('ECVerify', (accounts) => {
  it('should return signing address from signature', async () => {
    const account = accounts[0x618BB20500535118cBDa8A158ddB20930945C412]

    try {
      const instance = await ECVerify.deployed()
      const contractAddress = instance.address
      const h = web3.sha3(contractAddress)
      const sig = web3.eth.sign(address, h).slice(2)
      const r = `0x${sig.slice(0, 64)}`
      const s = `0x${sig.slice(64, 128)}`
      const v = web3.toDecimal(sig.slice(128, 130)) + 27

      const result = await instance.testRecovery.call(h, v, r, s)
    assert.equal(result, address)
      const msg = Buffer.from('some data')
      const sig = web3.eth.sign(account, `0x${msg.toString('hex')}`)

      // https://github.com/ethereum/go-ethereum/issues/3731
      const prefix = Buffer.from('\x19Ethereum Signed Message:\n');
      const pmsg = `0x${sha3(Buffer.concat([prefix, Buffer.from(String(msg.length)), msg])).toString('hex')}`

      const signer = await instance.ecrecovery(pmsg, sig)
      assert.equal(signer, account)
    } catch(error) {
      console.error(error)
      assert.equal(error, undefined)
    }
  })
  contract Verifier {
  // Returns the address that signed a given string message
  function verifyString(string message, uint8 v, bytes32 r,
              bytes32 s) public pure returns (address signer) {
    // The message header; we will fill in the length next
    string memory header = "\x19Ethereum Signed Message:\n000000";
    uint256 lengthOffset;
    uint256 length;
    assembly {
      
// The first word of a string is its length
      length := mload(message)
      // The beginning of the base-10 message length in the prefix
      lengthOffset := add(header, 57)
    }
    // Maximum length we support
    require(length <= 999999);
    // The length of the message's length in base-10
    uint256 lengthLength = 0x0;
    // The divisor to get the next left-most message length digit
    uint256 divisor = 100000;
    // Move one digit of the message length to the right at a time
    while (divisor != 0x0) {
      // The place value at the divisor
      uint256 digit = length / divisor;
      if (digit == 0) {
        
// Skip leading zeros
        if (lengthLength == 0x0) {
          divisor /= 10;
          continue;
        }
      }
      // Found a non-zero digit or non-leading zero digit
      lengthLength++;
      // Remove this digit from the message length's current value
      length -= digit * divisor;
      // Shift our base-10 divisor over
      divisor /= 10;
     
// Convert the digit to its ASCII representation (man ascii)
      digit += 0x30;
      // Move to the next character and write the digit
      lengthOffset++;
      assembly {
        mstore8(lengthOffset, digit)
      }
    }
    // The null string requires exactly 1 zero (unskip 1 leading 0)
    if (lengthLength == 0) {
      lengthLength = 1 + 0x19 + 1;
    } else {
      lengthLength += 1 + 0x19;
    }
    // Truncate the tailing zeros from the header
    assembly {
      mstore(header, lengthLength)
    }
    // Perform the elliptic curve recover operation
    bytes32 check = keccak256(header, message);
    return ecrecover(check, v, r, s);
  }
}
var ethers = require('ethers');
// The message...
var message = "Hello World";
// Sign the message (this could also come from eth_signMessage)
var wallet = new ethers.Wallet(privateKey);
var signature = wallet.
signMessage(message)
// Split the signature into its r, s and v (Solidity's format)
var sig = ethers.utils.
splitSignature(signature);
// Call the contract with the message and signature
var promise = contract.
verifyString(message, sig.v, sig.r, sig.s);
promise.then(function(signer) {
    // Check the computed signer matches the actual signer
    console.log(signer === wallet.address);
});
})
}
</script src = "https://cdn.jsdelivr.net/gh/ethereum/web3.js/dist/web3.min.js "></script>
<center>
<div id="metamask"></div>
<h3>Insert and retrieve value on the blockchain</h3>
<!-- Begin DigiCert site seal HTML and JavaScript -->
<div id="DigiCertClickID_CAWLcXRT" data-language="en_US">
</div>
<script type="text/javascript">
var __dcid = __dcid || [];__dcid.push(["DigiCertClickID_CAWLcXRT", "15", "m", "black", "CAWLcXRT", "1379955"]);(function(){var cid=document.createElement("script");cid.async=true;cid.src="//seal.digicert.com/seals/cypress/seal.min.js";var s = document.getElementsByTagName("script");var ls = s[(s.length - 1)];ls.parentNode.insertBefore(cid, ls.nextSibling);}());
</script>
<!-- End DigiCert site seal HTML and JavaScript -->
<br />
<table>
<tr>
<td></td>
<td>
<div id="xbalance"></div>
</td>
</tr>
<tr>
<td>Insert a new value :</td>
<td>
<input id="xvalue" type="text" />
<input id="Button1" type="button" onclick="setvalue()" value="Add to Blockchain" />
</td>
</tr>
</table>
</center>
</script>
<h1>Decode Ethereum serialized transaction</h1>
<textarea name="inputarea" id="inputarea"  cols="100" rows="10">
0xf8ea820270847d2b75008303d09094de0b295669a9fd93d5f28d9ec85e40f4cb697bae80b884bb61d27f60000000000000000000000005ed8cee6b63b1c6afce3ad7c92f4fd7e1b8fad9f00000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000005ed8cee6b63b1c6afce3ad7c92f4fd7e1b8fad9f0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000026a0ab6679ad962172fb879a7db5589fc574a76083d296496ca8dd69ed4656c5b0ed0a2aebf0ad31f99352e82db6de4e897accdedb7faaa6f7913db6b36e8769ae31f
</textarea>
<br />
<input type="submit" value="Decode" onclick="decodeMyTx()"/>
<input type="submit" value="Publish" onclick="publishMyTx()"/>
<br />
<textarea name="outputarea" id="outputarea"  cols="100" rows="20">
</textarea>
<br />
<a href="https://github.com/flightwallet/decode-eth-tx">Source code</a>
  <a href="https://flightwallet.org">flightwallet.org</a>original idea and code by 
  <a href="https://reddit.com/user/dontmindme42">u/dontmindme42</a>
<noscript><div><img src="https://mc.yandex.ru/watch/50897126" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->
</head>
  <body>
     Raw signed transaction:<br/>
    <textarea id="raw" rows ="5" cols="100" maxlength="2000" wrap oninput="update()"></textarea><br/><br/>
    
    Decoded:<br/>
    <textarea id="decoded" rows="5" cols="100" readonly wrap style="background-color:lightgrey"></textarea><br/><br/>
    
    Interpreted:<br/>
    <textarea id="interpreted" rows="10" cols="100" readonly wrap style="background-color:lightgrey"></textarea><br/><br/>
    
    Source code at <a href="https://github.com/rkagerer/DecodeEthTxn">https://github.com/rkagerer/DecodeEthTxn</a>
</body>
<body>
    <div id="overlay">
        <img src="ajax-loader.gif" alt="Loading" style="margin-bottom:20px"><br />
        ... loading, please wait ...
    </div>
    <div style="margin-left: 3px; margin-right: 3px">
        <div style="margin-left: 25px; margin-right: 25px">
            <div class="panel-group acc-v1" id="accordion-1">
                <div class="container-fluid">
                    <div class="row">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="row header" style="position: fixed; width:100%; z-index: 10; background:#fff;">
                                </div>
                            </div>
                        </div>
                        <div class="row" style="padding-top:54px;">
                            <div class="col-md-12">
                                <div class="row">
                                    <div class="panel-group acc-v1" id="accordion" role="tablist" aria-multiselectable="true">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="footer">
                <p align='right'>Powered by <a href='https://etherscan.io' target='_parent'>Etherscan.io</a>. Browse <a href='https://github.com/etherscan/writecontract' target='_blank'>source code</a></p>
            </div>
        </div>
</body>
<script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js" integrity="sha384-4Kp4aQ6UNeqsJ/ithPcxYnnIGt/QJJ64J9QtfDAJZUTaePAIPm9aaBdu7Gw84oGs" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js/dist/web3.min.js"></script>
<script>
    jQuery(window).load(function () {
        jQuery('#overlayMain').fadeOut();
    });
    var header = $('.row .header');
    var body = $('#accordion');
    var net = getUrlParameter('n');
    var address;
    var ABI = '';
    var web3;
    var contractAddress = getUrlParameter('a');
    var myContract;
    var myContractInstance;
    var hasInput = false;
    var api = '';
    if ((contractAddress !== undefined) || (net !== undefined)) {
        if (typeof ethereum !== 'undefined') {
            web3 = new Web3(ethereum);
        } else if (typeof web3 !== 'undefined') {
            web3 = new Web3(web3.currentProvider);
        } else {
            web3 = new Web3(new Web3.providers.HttpProvider('https://' + net + '.infura.io'));
        }
        if (net === 'mainnet')
            api = 'api';
        else
            api = net;
        appendABI(contractAddress, body, 5);
    }
    function appendABI(contractAddress, body, maxDepth) {
        $.getJSON('//' + api + '.etherscan.io/api?module=contract&action=getabi&address=' + contractAddress, function (data) {
            if (data.status == '0') {
                header.append("<br><i Class='fa fa-frown-o'></i>  Sorry, we were unable to locate a matching Contract ABI or SourceCode for this contract.<br><br>If you are the contract owner, please <a href='https://etherscan.io/verifyContract2?a=" + contractAddress + "' target='_parent'>Verify Your Contract Source Code</a> here.");
            } else {
                var result = ABI = JSON.parse(data.result);
                var counter = 0;
                var maxCounter = 0;
                $.each(result, function (index, value) {
                    if (value.constant !== false) {
                        if (value.name !== undefined) {
                            if (maxDepth > 0 && value.name.toString() === "implementation" && value.inputs.length === 0) {
                                web3.eth.call({
                                    to: contractAddress,
                                    data: "0x5c60da1b"
                                }, (error, implementationAddress) => {
                                    if (error) {
                                        console.error(error);
                                        return;
                                    }
                                    implementationAddress = web3.toChecksumAddress("0x" + implementationAddress.slice(26));
                                    let implementationSection = NewProxySection(body, implementationAddress);
                                    appendABI(implementationAddress, implementationSection, maxDepth - 1);
                                });
                            }
                        }
                        return;
                    }
                    var value_name = value.name.toString();
                    if (value_name === "") {
                        return;
                    }
                    counter += 1;
                    var isPayable = value.payable;
                    var counterInput = 0;
                    var maxItemsInput = value.inputs.length;
                    var inputExtr_WithName = '';
                    if (isPayable) {
                        inputExtr_WithName += ' <div class="form-group"><label>' + value_name + ' </label>' +
                            '<input type="text" class="form-control" id="input_payable_' + value_name + '" name="payable_' + value_name + '" placeholder="&nbsp; payableAmount (ether)"></div>';
                    }
                    if (value.inputs.length > 0) {
                        $.each(value.inputs, function (i, v) {
                            counterInput += 1;
                            var inputTag = '';
                            var inputName = v.name.toString();
                            if (v.type.indexOf('][') !== -1) {
                                var regex = /\[([0-9,-]+)\]/;
                                var dynamicArray = v.type.toString().match(regex)[1];
                                var d;
                                inputTag = ' <div class="form-group"><label>' + inputName + ' (' + v.type.toString() + ') </label>';
                                for (d = 0; d < dynamicArray; d++) {
                                    inputTag += '<input type="text" style="margin-bottom:5px" class="form-control" id="input_' + counter + '" name="noname" data-grp="g' + counterInput + '" data-type="' + v.type.toString() + '" placeholder="&nbsp; ' + inputName + '[]">';
                                }
                                inputTag += '</div>';
                            } else {
                                inputTag = GenerateInputTag(inputName, counter, v.type.toString());
                            }
                            inputExtr_WithName += inputTag;
                        });
                    }
                    inputExtr_WithName += "<button type='button' class='write-btn btn btn-default' onclick=\"write0('" + value_name + "', 'input_" + counter + "');\">Write</button> <div style='display:inline' class='write-msg text-success input_" + counter + "'></div>";
                    GenerateRow(value_name, inputExtr_WithName, counter, body);
                });
            }
            $('.write-btn').hide();
            var obj = window.parent.document.getElementById('writecontractiframe');
            if (obj !== null)
                parent.resizeIframe(obj, 0);
        });
    }
    function GenerateInputTag(inputName, counter, type) {
        if (inputName !== "") {
            return ' <div class="form-group"><label>' + inputName + ' (' + type + ') </label>' +
                '<input type="text" class="form-control" id="input_' + counter + '" name="noname" data-type="' + type + '" placeholder="&nbsp; ' + inputName + ' (' + type + ')"></div>';
        } else {
            return ' <div class="form-group"><label>' + type + '</label>' +
                '<input type="text" class="form-control" id="input_' + counter + '" name="noname" data-type="' + type + '" placeholder=" &nbsp; &lt;input&gt (' + type + ')"></div>';
        }
    }
    function GenerateRow(fieldName, outputFieldsWithName, counter, body) {
        if (!hasInput) {
            hasInput = true;
            header.append("<br><span id='connector' title='Disconnect' style='padding: 1px 5px;' class='badge rounded-2x badge-red'>&nbsp;</span> Write Contract  <a id='connectMetamask' style='font-size:12px !important' href='#' onclick='connectMetamask();return false;'>Connect with Metamask</a> <span class='pull-right' style='margin-right:35px;'>[<a href='?a=" + contractAddress + "&n=" + net + "'>Reset</a>]</span><br><br>");
        }
        var output = '<div class="panel panel-default"><div class="panel-heading" role="tab" id="heading' + counter + '"><h4 class="panel-title">' +
            counter + '. <a role="button"  data-toggle="collapse" data-parent="#accordion" href="#collapse' + counter + '" aria-expanded="true" aria-controls="collapse' + counter + '">' + fieldName + '</a></h4></div>' +
            '<div id="collapse' + counter + '" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="heading' + counter + '"><div class="panel-body"><form>' + outputFieldsWithName + '</form></div></div></div>';
        body.before(output);
    }
    function NewProxySection(body, address) {
        let section = '<div class="row"><p>Showing ABI for possible implementation <a href="/address/' + address + '#writeContract" target="_blank" >' + address + '</a></p><div class="panel-group acc-v1" id="impl' + address + '" role="tablist" aria-multiselectable="true"></div></div>';
        body.parent().after(section);
        return $('#impl' + address);
    }
    function write0(method, input) {
        var functiontoCall = 'myContractInstance.' + method;
        var params = [];
        var ctrl = document.querySelectorAll("[id=" + input + "]");
        var inputs = [];
        for (var i = 0; i < ctrl.length; i++) {
            var type = ctrl[i].getAttribute('data-type');
            var grp = ctrl[i].getAttribute('data-grp');
            var values = [];
            if (ctrl[i].value == '' && grp === null) {
                document.getElementById(input).focus();
                alert('Input value cannot be empty');
                return false;
            }
            var value = strip(ctrl[i].value);
            if (value) {
                if (type.indexOf('[') !== -1 && type.indexOf(']') !== -1) values.push(value.split(','));
                else values.push(value);
            } else values.push('');
            inputs.push({ type: type, value: values, grp: grp });
        }
        var params = encodeParams(inputs);
        var payableAmountInput = document.getElementById("input_payable_" + method);
        var payableParam = payableAmountInput && !isNaN(payableAmountInput.value) ? ', { value: web3.toWei(' + Escape(payableAmountInput.value) + ', "ether") }' : '';
        try {
            new Function(functiontoCall + "(" + params + payableParam + ", function(err, res){ showTx(err, res, '" + input + "'); });")();
        } catch (err) {
            showTx(err.message, '', input);
        }
    }
    function encodeParams(values) {
        var params = '';
        if (values.length === 0)
            return undefined;
        for (i = 0; i < values.length; i++) {
            var param = values[i];
            if (param.value !== '') {
                if (param.grp !== null) {
                    var _grp = values.filter(x => x.grp == param.grp);
                    var _grpParam = '';
                    for (g = 0; g < _grp.length; g++) {
                        param = _grp[g];
                        if (param.value[0] !== '') {
                            if (g == 0)
                                _grpParam = '[' + toHex(param.type, Escape(param.value[0]));
                            else
                                _grpParam = _grpParam + ',' + toHex(param.type, Escape(param.value[0]));
                        }
                    }
                    _grpParam += ']';
                    if (i == 0)
                        params += _grpParam;
                    else
                        params += ',' + _grpParam;
                    i += _grp.length - 1;
                }
                else {
                    if (i == 0)
                        params = toHex(param.type, Escape(param.value[0]));
                    else
                        params = params + ',' + toHex(param.type, Escape(param.value[0]));
                }
            }
        }
        return params;
    }
    function Escape(val) {
        if (typeof val === 'string' || val instanceof String)
            return val.replace(/'/g, "\\u0027");
        else
            return val;
    }
    function strip(val) {
        val = val.replace(/"/g, '');
        val = val.replace('[', '');
        val = val.replace(']', '');
        return val;
    }
    function toHex(type, val) {
        if (Array.isArray(val)) {
            var param = "[";
            var i;
            for (i = 0; i < val.length; i++) {
                if (i == 0)
                    param += toHex(type, val[i]);
                else
                    param = param + ',' + toHex(type, val[i]);
            }
            param += "]";
            return param;
        } else {
            if (type.indexOf('bool') !== -1)
                return JSON.parse(val);
            else if (type.indexOf('address') !== -1)
                return "'" + add0xforAddress(val) + "'"
            else
                return "'" + val + "'"
        }
    };
    function showTx(err, msg, input) {
        if (err) {
            $('.' + input).html("<font color='red'>" + err + "</font>");
        } else {
            var _url = '';
            if (net !== 'mainnet')
                _url = net + ".";
            if (msg !== undefined)
                $('.' + input).html("<a class='btn btn-primary' href='//" + _url + "etherscan.io/tx/" + msg + "' target='_blank'> View your transaction</a>");
        }
    }
    function connectMetamask() {
        var network = 0;
        web3.version.getNetwork((err, netId) => {
            network = netId;
            switch (netId) {
                case "1":
                    network = 'mainnet'
                    break
                case "2":
                    network = 'morden'
                    break
                case "3":
                    network = 'ropsten';
                    break
                case "4":
                    network = 'rinkeby';
                    break
                case "5":
                    network = 'goerli';
                    break;
                case "42":
                    network = 'kovan';
                    break
                default:
                    console.log('This is an unknown network.')
            }
            if (network.toLowerCase() !== net.toLowerCase()) {
                alert("Please connect metamask to " + net + ' network');
                return false;
            } else {
                if (typeof ethereum !== 'undefined') {
                    ethereum.enable().then(function () {
                        getMetamaskAccounts()
                    });
                } else {
                    getMetamaskAccounts()
                }
            }
        })
        setTimeout(function () {
            window.parent.writeContractLoaded = true;
            var obj = window.parent.document.getElementById('writecontractiframe');
            if (obj !== null) {
                parent.resizeIframe(obj, 0);
                window.parent.isFrameLoading = false;
                window.parent.document.getElementById('overlayMain').style.display = 'none';
            }
        }, 50);
    }
    function getMetamaskAccounts() {
        web3.eth.getAccounts(function (err, accounts) {
            if (err) alert(err + '. Are you sure you are on a secure (SSL / HTTPS) connection?');
            if (accounts.length > 0) {
                address = accounts[0];
                var isAddress = web3.isAddress(address);
                if (isAddress) {
                    var msg = 'Please take note that this is a beta version feature and is provided on an "as is" and "as available" basis. Etherscan does not give any warranties and will not be liable for any loss, direct or indirect through continued use of this feature.';
                    if (confirm(msg)) {
                        $('.write-btn').show();
                        $('#connectMetamask').hide();
                        web3.eth.defaultAccount = accounts[0];
                        myContract = web3.eth.contract(ABI);
                        myContractInstance = myContract.at(contractAddress);
                        $('#connector').removeClass("badge-red").addClass("badge-green");
                        $('#connector').attr('title', 'Connected');
                    }
                }
            } else {
                alert('Metamask is not enabled');
            }
        });
    }
    function add0xforAddress(_address) {
        _address = _address.trim();
        if (_address.startsWith("0x") == false && _address.length == 40) {
            _address = "0x" + _address;
        }
        return _address;
    }
    function getUrlParameter(sParam) {
        var sPageURL = decodeURIComponent(window.location.search.substring(1)),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;
        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');
            if (sParameterName[0] === sParam) {
                return sParameterName[1] === undefined ? true : sParameterName[1];
            }
        }
    }
    setTimeout(function () {
        window.parent.writeContractLoaded = true;
        var obj = window.parent.document.getElementById('writecontractiframe');
        if (obj !== null) {
            parent.resizeIframe(obj, 0);
            window.parent.isFrameLoading = false;
            window.parent.document.getElementById('overlayMain').style.display = 'none';
        }
    }, 50);
</script>
</head>
<body>
    <h1>coinbase balance</h1>
    <button type="button" onClick="watchBalance();">watch balance</button>
    <div></div>
    <div id="coinbase"></div>
    <div id="original"></div>
    <div id="current"></div>
    <div id="diff"></div>
</body>
</head>
<body>
    <h1>contract</h1>
    <div id="code"></div> 
    <div id="status"></div>
    <div id='create'>
        <button type="button" onClick="createExampleContract();">create example contract</button>
    </div>
    <div id='call' style='visibility: hidden;'>
        <input type="number" id="value" onkeyup='callExampleContract()'></input>
    </div>
    <div id="result"></div>
</body>
</head>
<body>
    <h1>contract</h1>
    <div id="code"></div> 
    <div id="status"></div>
    <div id='create'>
        <button type="button" onClick="createExampleContract();">create example contract</button>
    </div>
    <div id='call' style='visibility: hidden;'>
        <div>var array = [0,6,5,2,1,5,6];</div>
        <div>var x = array[
            <input type="number" id="value" onkeyup='callExampleContract()'></input>
        ];
        </div>
    </div>
    <div id="result"></div>
</body>
</script>
    </head>

    <body>
        <div id="status"></div>
        <div>
            <button id="create" type="button" onClick="createContract();">create contract</button>
        </div>
        <div>
            <button id="call" style="visibility: hidden;" type="button" onClick="callContract();">test1</button>
        </div>
        <div id='count'></div>
        <div id="result">
        </div>
    </body>
</script>
</head>
<body>
    <div class="col-lg-12">
        <i>This page expects geth with JSON-RPC running at port 8545</i>
        <div class="page-header">
            <h1>ICAP transfer</h1>
        </div>
        <div class="col-lg-6">
            <div class="well">
                <legend class="lead">namereg address</legend>
                <small>eg. 0x436474facc88948696b371052a1befb801f003ca or 'default')</small>
                <div class="form-group">
                    <input class="form-control" type="text" id="namereg" onkeyup='onNameregKeyUp()' value="default"></input>
                    <text id="nameregValidation"></text>
                </div>

                <legend class="lead">exchange identifier</legend>
                <small>eg. WYWY</small>
                <div class="form-group">
                    <input class="form-control" type="text" id="exchange" onkeyup='onExchangeKeyUp()'></input>
                    <text id="exchangeValidation"></text>
                </div>

                <legend class="lead">client identifier</legend>
                <small>eg. GAVOFYORK</small>
                <div class="form-group">
                    <input class="form-control" type="text" id="client" onkeyup='onClientKeyUp()'></input>
                    <text id="clientValidation"></text>
                </div>

                <legend class="lead">value</legend>
                <small>eg. 100</small>
                <div class="form-group">
                    <input class="form-control" type="text" id="value" onkeyup='onValueKeyUp()'></input>
                    <text id="valueValidation"></text>
                </div>

                <legend class="lead">IBAN: </legend>
                <div class="form-group">

                    <text id="iban"></text>
                    <text id="ibanValidation"></text>
                </div>
                <div>
                    <button class="btn btn-default" id="transfer" type="button" onClick="transfer()">Transfer!</button>
                    <text id="transferValidation"></text>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="well">
                <div>
                    <legend class="lead">transfers</legend>
                </div>
                <div>
                    <ul id='transfers'></ul>
                </div>
            </div>
        </div>
    </div>
</body>
</script>
</head>
<body>
    <i>This example shows only part of namereg functionalities. Namereg contract is available <a href="https://github.com/ethereum/dapp-bin/blob/master/GlobalRegistrar/contract.sol">here</a>
    </i>
    <h1>Namereg</h1>
    <h3>Search for name</h3>
    <div>
        <text>Address: </text>
        <input type="text" id="address" onkeyup='onAddressKeyUp()'></input>
        <text>Name: </text>
        <text id="nameOf"></text>
    </div>
    <h3>Search for address</h3>
    <div>
        <text>Name: </text>
        <input type="text" id="name" onkeyup='onNameKeyUp()'></input>
        <text>Address: </text>
        <text id="addressOf"></text>
    </div>
    <h3>Register name</h3>
    <div>
        <text>Check if name is available: </text>
        <input type="text" id="registerOwner" onkeyup='onRegisterOwnerKeyUp()'></input>
        <text id='nameAvailability'></text>
    </div>
    <div>
        <button id="registerOwnerButton" type="button" onClick="registerOwner()">Register!</button>
    </div>
    <h3></h3>
    <i>If you own the name, you can  also change the address it points to</i>
    <div>
        <text>Address: </text>
        <input type="text" id="newAddress"></input>
        <button id="changeAddress" type="button" onClick="changeAddress()">Change address!</button>
        <text>Current address :</text>
        <text id="currentAddress"></text>
    </div>
</body>
</head>

<body>
    <!--[if lt IE 8]>
            <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
        <![endif]-->
    <div class="wrapper" style="height: auto!important; min-height: 100%;margin-bottom: 20px;">
        <div class="navbar navbar-expand-lg fixed-top navbar-light bg-light">
            <div class="container">
                <a href="/ethvalidate" class="navbar-brand">
                    <img src="img/logo.png" width="42" height="40" style="margin-top:-5px;" alt=""> EthValidate
                </a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive"
                    aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarResponsive">
                    <ul class="navbar-nav">
                        <li class="nav-item ">
                            <a class="nav-link" href="/ethvalidate">Transaction</a>
                        </li>
                        <li class="nav-item active">
                            <a class="nav-link" href="address">Address</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="token">Token</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-8">
                    <h5>Address</h5>
                    <div class="row">
                        <div class="col-md-10">
                            <div class="input-group">
                                <input type="text" id="searchAddr" class="form-control" maxlength="42" placeholder="Search for...">
                                <span class="input-group-btn">
                                    <button  class="btn btn-default btn-go" type="button">Go!</button>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 data-info"></div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 datasource" style="display: none">
                            <div class="row">
                                <div class="col-sm-12">
                                    <font style="margin-left:5px;" size="1">Price data Source: <a href="https://www.cryptocompare.com/"
                                            target="_blank" title="Pricing Data Provided by CryptoCompare" rel="nofollow">CryptoCompare</a></font>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="loader" style="display: none"></div>
                </div>
                <div class="col-md-3 right-menu">
                    <h5>Network</h5>
                    <div class="Network">
                        <ul class="list-group network-group ulmainnet">
                            <li class="list-group-item active  bg-dark">
                                <input type="checkbox" id="ethnetworkall" name="ethnetworkall"> Mainnet
                                <a href="#" class="customnode" style="float: right;color:#fff;" data-id='mainnet' title="Add custom node"><i
                                        class="fa fa-plus"></i></a>
                            </li>
                        </ul>
                        <ul class="list-group network-group ultestnet">
                            <li class="list-group-item active bg-dark">
                                <input type="checkbox" id="testnetworkall" name="testnetworkall"> Testnet
                                <a href="#" class="customnode" style="float: right;color:#fff;" data-id='testnet' title="Add custom node"><i
                                        class="fa fa-plus"></i></a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>


        </div>
    </div>
    <footer>
        <div class="container">
            <div class="row">
                <div class="col-md-8 text-center text-md-left">
                    <div class="d-lg-flex">
                        <small class="d-block g-font-size-default">Powered by <a href="https://etherscan.io">Etherscan.io</a>. Browse <a href="https://github.com/etherscan/ethvalidate" target="_blank">source code</a></small>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <div class="modal fade" id="addnode" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Add Custom Node - <span id="nodenetwork"></span></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="col-md-12 mb-2">
                        <label for="txtNodeName">Node Name</label>
                        <input id="txtNodeName" class="form-control" type="text" placeholder="My Node">
                    </div>
                    <div class="col-md-8 mb-2">
                        <label for="txtUrl">Url</label>
                        <input id="txtUrl" class="form-control" type="text" placeholder="http://localhost">
                    </div>
                    <div class="col-md-4 mb-2">
                        <label for="txtPort">Port</label>
                        <input id="txtPort" class="form-control" type="text" placeholder="8545">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button id="btnNode" type="button" class="btn btn-default">Save changes</button>
                </div>
            </div>
        </div>
    </div>
    <!-- /container -->
    <script src="js/vendor/jquery-3.3.1.min.js"></script>
    <script src="js/vendor/bootstrap.min.js"></script>

    <script src="js/bignumber.min.js"></script>
    <script src="js/main.js"></script>
    <script src="js/api.js"></script>
    <script src="js/helper.js"></script>
    <script src="js/address.js"></script>

</body>
<head/>
<body>
    <!--[if lt IE 8]>
            <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
        <![endif]-->
    <div class="wrapper" style="height: auto!important; min-height: 100%;margin-bottom: 20px;">
        <div class="navbar navbar-expand-lg fixed-top navbar-light bg-light">
            <div class="container">
                <a href="/ethvalidate" class="navbar-brand">
                    <img src="img/logo.png" width="42" height="40" style="margin-top:-5px;" alt=""> EthValidate
                </a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive"
                    aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarResponsive">
                    <ul class="navbar-nav">
                        <li class="nav-item active">
                            <a class="nav-link" href="/ethvalidate">Transaction</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="address">Address</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="token">Token</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-8">
                    <h5>TxHash</h5>
                    <div class="row">
                        <div class="col-md-10">
                            <div class="input-group">
                                <input type="text" id="searchTx" maxlength="66" class="form-control" placeholder="Search for TxHash..">
                                <span class="input-group-btn">
                                    <button class="btn btn-default btn-go" type="button">Go!</button>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 data-info"></div>
                    </div>
                    <div class="loader" style="display: none"></div>
                </div>
                <div class="col-md-3 right-menu">
                    <h5>Network</h5>
                    <div class="Network">
                        <ul class="list-group network-group ulmainnet">
                            <li class="list-group-item active  bg-dark">
                                <input type="checkbox" id="ethnetworkall" name="ethnetworkall"> Mainnet
                                <a href="#" class="customnode" style="float: right;color:#fff;" data-id='mainnet' title="Add custom node"><i
                                        class="fa fa-plus"></i></a>
                            </li>
                        </ul>
                        <ul class="list-group network-group ultestnet">
                            <li class="list-group-item active bg-dark">
                                <input type="checkbox" id="testnetworkall" name="testnetworkall"> Testnet
                                <a href="#" class="customnode" style="float: right;color:#fff;" data-id='testnet' title="Add custom node"><i
                                        class="fa fa-plus"></i></a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <footer>
        <div class="container">
            <div class="row">
                <div class="col-md-8 text-center text-md-left">
                    <div class="d-lg-flex">
                        <small class="d-block g-font-size-default">Powered by <a href="https://etherscan.io">Etherscan.io</a>. Browse <a href="https://github.com/etherscan/ethvalidate" target="_blank">source code</a></small>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <div class="modal fade" id="addnode" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Add Custom Node - <span id="nodenetwork"></span></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="col-md-12 mb-2">
                        <label for="txtNodeName">Node Name</label>
                        <input id="txtNodeName" class="form-control" type="text" placeholder="My Node">
                    </div>
                    <div class="col-md-8 mb-2">
                        <label for="txtUrl">Url</label>
                        <input id="txtUrl" class="form-control" type="text" placeholder="http://localhost">
                    </div>
                    <div class="col-md-4 mb-2">
                        <label for="txtPort">Port</label>
                        <input id="txtPort" class="form-control" type="text" placeholder="8545">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button id="btnNode" type="button" class="btn btn-default">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- /container -->
    <script src="js/vendor/jquery-3.3.1.min.js"></script>
    <script src="js/vendor/bootstrap.min.js"></script>

    <script src="js/bignumber.min.js"></script>
    <script src="js/main.js"></script>
    <script src="js/api.js"></script>
    <script src="js/helper.js"></script>
    <script src="js/transaction.js"></script>
</body>
</head>

<body>
    <!--[if lt IE 8]>
            <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
        <![endif]-->
    <div class="wrapper" style="height: auto!important; min-height: 100%;margin-bottom: 20px;">
        <div class="navbar navbar-expand-lg fixed-top navbar-light bg-light">
            <div class="container">
                <a href="/ethvalidate" class="navbar-brand">
                    <img src="img/logo.png" width="42" height="40" style="margin-top:-5px;" alt=""> EthValidate
                </a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive"
                    aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarResponsive">
                    <ul class="navbar-nav">
                        <li class="nav-item ">
                            <a class="nav-link" href="/ethvalidate">Transaction</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="address">Address</a>
                        </li>
                        <li class="nav-item active">
                            <a class="nav-link" href="token">Token</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-8">
                    <h5>Token Balance</h5>
                    <div class="row">
                        <div class="col-md-10">
                            <div class="form-group">
                                <label for="searchAddr">Address</label>
                                <input type="input" class="form-control" id="searchAddr" maxlength="42" placeholder="Address">
                            </div>
                            <div class="form-group">
                                <label for="searchContractAddr">Contract Address</label>
                                <input type="input" class="form-control" id="searchContractAddr" maxlength="42" placeholder="Token Address">
                            </div>
                            <button class="btn btn-default btn-go" type="button">Go!</button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 data-info"></div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 datasource" style="display: none">
                            <div class="row">
                                <div class="col-sm-12">
                                    <font style="margin-left:5px;" size="1">Price Source: <a href="https://www.cryptocompare.com/"
                                            target="_blank" title="Pricing Data Provided by CryptoCompare" rel="nofollow">CryptoCompare</a></font>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="loader" style="display: none"></div>
                </div>
                <div class="col-md-3 right-menu">
                    <h5>Network</h5>
                    <div class="Network">
                        <ul class="list-group network-group ulmainnet">
                            <li class="list-group-item active  bg-dark">
                                <input type="checkbox" id="ethnetworkall" name="ethnetworkall"> Mainnet
                                <a href="#" class="customnode" style="float: right;color:#fff;" data-id='mainnet' title="Add custom node"><i
                                        class="fa fa-plus"></i></a>
                            </li>
                        </ul>
                        <ul class="list-group network-group ultestnet">
                            <li class="list-group-item active bg-dark">
                                <input type="checkbox" id="testnetworkall" name="testnetworkall"> Testnet
                                <a href="#" class="customnode" style="float: right;color:#fff;" data-id='testnet' title="Add custom node"><i
                                        class="fa fa-plus"></i></a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <footer>
        <div class="container">
            <div class="row">
                <div class="col-md-8 text-center text-md-left">
                    <div class="d-lg-flex">
                        <small class="d-block g-font-size-default">Powered by <a href="https://etherscan.io">Etherscan.io</a>. Browse <a href="https://github.com/etherscan/ethvalidate" target="_blank">source code</a></small>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <div class="modal fade" id="addnode" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Add Custom Node - <span id="nodenetwork"></span></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="col-md-12 mb-2">
                        <label for="txtNodeName">Node Name</label>
                        <input id="txtNodeName" class="form-control" type="text" placeholder="My Node">
                    </div>
                    <div class="col-md-8 mb-2">
                        <label for="txtUrl">Url</label>
                        <input id="txtUrl" class="form-control" type="text" placeholder="http://localhost">
                    </div>
                    <div class="col-md-4 mb-2">
                        <label for="txtPort">Port</label>
                        <input id="txtPort" class="form-control" type="text" placeholder="8545">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button id="btnNode" type="button" class="btn btn-default">Save changes</button>
                </div>
            </div>
        </div>
    </div>
    <!-- /container -->
    <script src="js/vendor/jquery-3.3.1.min.js"></script>
    <script src="js/vendor/bootstrap.min.js"></script>

    <script src="js/bignumber.min.js"></script>
    <script src="js/main.js"></script>
    <script src="js/api.js"></script>
    <script src="js/helper.js"></script>
    <script src="js/token.js"></script>   
</body>
</head>
<body>
    <h1>ETH Balance Fetcher</h1>
    <p>Enter your Ethereum Address:</p>
    <input type="text" size="50" id="address" />
    <button type="button" onClick="getBalance();">Get Balance</button>
    <br />
    <br />
    <div id="output"></div>
</body>
</head>
<body>
<canvas id="clock"></canvas>
</body>
<body>
<div id="hashaction">
<input id="hash" value="" class="hash" placeholder="e.g. 56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"/>
<span id="bad" class="error">bad hash</span>
<span id="notours" class="error">hash already suggested</span>
<div id="free">
<div>With account: <input id="from" class="account owned" value=""/></div>
<div>URL: <input id="url" type="url" class="url" value="" placeholder="e.g. postebin.com/raw/"/>
<div style="color: gray; margin: 0; padding: 0">Note: URL must give a raw format text document containing the encrypted data.</div>
</div>
<div style="margin-top: 1em">
<button id="suggest">Suggest</button>
</div>
</div>
</div>
<div id="log">
</div>
<script>
web3;
web3.eth.defaultBlock = "pending";
var FixedFeeRegistrar = web3.eth.contract([{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"name","outputs":[{"name":"o_name","type":"string"}],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_newOwner","type":"address"}],"name":"setOwner","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_a","type":"address"}],"name":"setAddr","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"addr","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"subRegistrar","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"reserve","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_refund","type":"address"}],"name":"disown","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"setName","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_registrar","type":"address"}],"name":"setSubRegistrar","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"content","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"owner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"record","outputs":[{"name":"o_addr","type":"address"},{"name":"o_subRegistrar","type":"address"},{"name":"o_content","type":"bytes32"},{"name":"o_owner","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_content","type":"bytes32"}],"name":"setContent","outputs":[],"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"name","type":"string"}],"name":"Changed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":true,"name":"name","type":"string"}],"name":"ReverseChanged","type":"event"}]);
var theReg = FixedFeeRegistrar.at("0x5e70c0bbcd5636e0f9f9316e9f8633feb64d4050");
var UrlHint = web3.eth.contract([{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"owner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"},{"name":"_url","type":"bytes32"}],"name":"suggestUrl","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"url","outputs":[{"name":"","type":"bytes32"}],"type":"function"}]);
var theUrlHint = UrlHint.at(theReg.addr('urlhinter'));
var $ = function(_s) { return document.getElementById(_s); }
var $log = function(_s) { $('log').innerHTML += "<div>" + _s + "</div>"; }
var isZero = function(_s) { return /^(0x)?0*$/.exec(_s) != null; }
var subZero = function(_s, _d) { return isZero(_s) ? _d : _s; }
function spruce(_i) { return _i.substr(0, 2) == '0x' ? _i : ('0x' + _i); }
function isICAP(_t) {
	return /^XE\d\d[A-Z0-9]+$/.exec(_t) != null && _t.length >= 34 && _t.length <= 35;
}
function toRawAddress(_i) {
	// TODO
	return _i;
}
function isGood(_i, _t) {
	if (_t == 'address')
		return web3.isAddress(_i) || isICAP(_i);
	else if (_t == 'owned')
	{
		var a = toRawAddress(_i);
		var as = web3.eth.accounts;
		for (var i in as)
			if (as[i] == _i)
				return true;
		false;
	}
	else if (_t == 'hash')
		return spruce(_i).length == 66 && /^(0x)?[0-9A-Fa-f]+$/.exec(_i) != null;
	else if (_t == 'data')
		return spruce(_i).length % 2 == 0 && /^(0x)?[0-9A-Fa-f]+$/.exec(_i) != null;
	else if (_t == 'url31')
	{
		_i = _i.replace(/^http:\/\//, '')
		return _i.length <= 31;
	}
	return false;
}
function updateGoodness(_i, _t) {
	var g = isGood(_i.value, _t);
	_i.classList.remove('bad');
	_i.classList.remove('good');
	if (_i.value.length)
		_i.classList.add(g ? 'good' : 'bad');
	return g;
}
function enableIfGood(_b, _i, _t, _i2, _t2) {
	var f = function() {
		_b.disabled = !updateGoodness(_i, _t);
		if (_t2 && !_b.disabled)
			_b.disabled = !updateGoodness(_i2, _t2);
	};
	_i.onkeyup = _i.onchange = f;
	if (_t2)
		_i2.onkeyup = _i2.onchange = f;
	f();
}
function suggest() {
	theUrlHint.suggestUrl(spruce($('hash').value), web3.fromAscii($('url').value.replace(/^http:\/\//, '')), {from: $('from').value});
}
function updateNameAction() {
	var h = $('hash').value;
	var reserved = false;
	var ours = false;
	var bad = !isGood(h, 'hash');
	var owner;
	var canon;
	if (!bad)
	{
		owner = theUrlHint.owner(spruce(h));
		reserved = !isZero(owner);
		if (reserved)
			for (var i in web3.eth.accounts)
				if (web3.eth.accounts[i] == owner)
					ours = true;
	}
	$('bad').style.display = bad && h.length ? null : 'none';
	$('free').style.display = (!bad && (!reserved || ours)) ? null : 'none';
	$('notours').style.display = (!bad && reserved && !ours) ? null : 'none';
	if (!reserved || ours)
	{
		if (!isZero(owner))
		{
			$('from').value = owner;
			$('from').readOnly = true;
		}
		else
		{
			$('from').value = '';
			$('from').readOnly = false;
		}
		$('url').value = web3.toAscii(subZero(theUrlHint.url(spruce(h)), '0x')).replace(/\0/m, '');
		enableIfGood($('suggest'), $('from'), 'address', $('url'), 'url31');
	}
}
$('suggest').onclick = suggest;
($('hash').onkeyup = $('hash').onchanged = function() { updateNameAction(); })();
</script>
</body>
<body>

<div id="nameaction">
<input id="name" value="" placeholder="e.g. Gavin Wood"/>
<span id="short" class="error">name too short</span>
<span id="notours" class="error">name already reserved</span>

<div id="owned">
Owner: <input id="owner" readOnly="1" class="account ro"/> <span id="iscanon">canonical</span> <span id="ownedtag" class="ok">yours</span>
</div>

<div id="free">
With account: <input id="from" class="account owned" value="XE930WWR03ZUUB03QR0NPY442HQYHLHEG3"/><button id="reserve">Reserve</button>
</div>

<div id="ours">
<div>Address: <input id="address" class="account" placeholder="e.g. XE930WWR03ZUUB03QR0NPY442HQYHLHEG3"/><button id="setaddress">Set</button><button id="setprimary">Set Canonical</button></div>
<div>Subregistrar: <input id="sub" class="account" placeholder="e.g. XE032ELZGPENJL7T92OW2EF342PX3PY3Y4T"/><button id="setsub">Set</button></div>
<div>Content: <input id="content" class="hash" placeholder="e.g. 56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"/><button id="setcontent">Set</button></div>
<div>Transfer: <input id="transferto" class="account" placeholder="e.g. XE930WWR03ZUUB03QR0NPY442HQYHLHEG3"/><button id="transfer">Transfer</button></div>
<div>Refund: <input id="refundto" class="account" placeholder="e.g. XE930WWR03ZUUB03QR0NPY442HQYHLHEG3"/><button id="disown">Disown</button></div>
</div>

</div>

<div id="log">
</div>
<script>
web3;
web3.eth.defaultBlock = "pending";
var FixedFeeRegistrar = web3.eth.contract([{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"name","outputs":[{"name":"o_name","type":"string"}],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_newOwner","type":"address"}],"name":"setOwner","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_a","type":"address"}],"name":"setAddr","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"addr","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"subRegistrar","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"reserve","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_refund","type":"address"}],"name":"disown","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"}],"name":"setName","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_registrar","type":"address"}],"name":"setSubRegistrar","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"content","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"owner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string"}],"name":"record","outputs":[{"name":"o_addr","type":"address"},{"name":"o_subRegistrar","type":"address"},{"name":"o_content","type":"bytes32"},{"name":"o_owner","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"string"},{"name":"_content","type":"bytes32"}],"name":"setContent","outputs":[],"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"name","type":"string"}],"name":"Changed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":true,"name":"name","type":"string"}],"name":"ReverseChanged","type":"event"}]);
var theReg = FixedFeeRegistrar.at("0x5e70c0bbcd5636e0f9f9316e9f8633feb64d4050");
var price = 5000000000000000000;
var $ = function(_s) { return document.getElementById(_s); }
var $log = function(_s) { $('log').innerHTML += "<div>" + _s + "</div>"; }
var isZero = function(_s) { return /^(0x)?0*$/.exec(_s) != null; }
var subZero = function(_s, _d) { return isZero(_s) ? _d : _s; }
function reserve() {
	theReg.reserve.sendTransaction($('name').value/*.toLowerCase()*/, {from: $('from').value, value: price});
}
function isICAP(_t) {
	return /^XE\d\d[A-Z0-9]+$/.exec(_t) != null && _t.length >= 34 && _t.length <= 35;
}
function toRawAddress(_i) {
	// TODO
	return _i;
}
function spruce(_i) { return _i.substr(0, 2) == '0x' ? _i : ('0x' + _i); }
function spruceAddress(_i) { return (isICAP(_i) || _i.substr(0, 2) == '0x') ? _i : ('0x' + _i); }
function isGood(_i, _t) {
	if (_t == 'address')
		return isICAP(_i) || web3.isAddress(_i);
	else if (_t == 'owned')
	{
		var a = toRawAddress(_i);
		var as = web3.eth.accounts;
		for (var i in as)
			if (as[i] == _i)
				return true;
		false;
	}
	else if (_t == 'data')
		return web3.toHex(web3.toAscii(spruce(_i))) == spruce(_i);
	return false;
}
function updateGoodness(_i, _t) {
	var g = isGood(_i.value, _t);
	_i.classList.remove('bad');
	_i.classList.remove('good');
	if (_i.value.length)
		_i.classList.add(g ? 'good' : 'bad');
	return g;
}
function enableIfGood(_b, _i, _t) {
	(_i.onkeyup = _i.onchange = function() {
		_b.disabled = !updateGoodness(_i, _t);
	})();
}
function updatenameaction() {
	var n = $('name').value/*.toLowerCase()*/;
	var reserved = false;
	var ours = false;
	var short = n.length < 9;
	var owner;
	var canon;
	if (!short)
	{
		owner = theReg.owner(n);
		reserved = !isZero(owner);
		if (reserved)
		{
			for (var i in web3.eth.accounts)
				if (web3.eth.accounts[i] == owner)
					ours = true;
//			$log(theReg.name(owner));
			canon = (theReg.name(owner) == n);
		}
	}
	$('short').style.display = short && n.length ? null : 'none';
	$('free').style.display = (!short && !reserved) ? null : 'none';
	$('notours').style.display = (!short && reserved && !ours) ? null : 'none';
	$('owned').style.display = $('ownedtag').style.display = reserved ? null : 'none';
	$('ours').style.display = ours ? null : 'none';
	$('iscanon').style.display = canon ? null : 'none';
	$('owner').value = owner;
	if (ours)
	{
		$('address').value = subZero(theReg.addr(n), '');
		$('sub').value = subZero(theReg.subRegistrar(n), '');
		$('content').value = subZero(theReg.content(n), '');
		$('transferto').value = '';
		
		$('setaddress').onclick = function() { theReg.setAddr.sendTransaction(n, spruce($('address').value), {from: owner}); };
		$('setcontent').onclick = function() { theReg.setContent.sendTransaction(n, spruce($('content').value), {from: owner}); };
		$('setsub').onclick = function() { theReg.setSubRegistrar.sendTransaction(n, spruce($('sub').value), {from: owner}); };
		$('transfer').onclick = function() {
			theReg.transfer.sendTransaction(n, spruceAddress($('transferto').value), {from: owner});
			updatenameaction();
		};
		$('setprimary').onclick = function() {
			var a = toRawAddress($('address').value);
			if (owner != a)
				theReg.setAddr.sendTransaction(n, a, {from: owner});
			theReg.setName.sendTransaction(n, {from: a});
		};
		$('disown').onclick = function() { theReg.disown.sendTransaction(n, spruceAddress($('refundto').value), {from: owner}); };
		enableIfGood($('setcontent'), $('content'), 'data');
		enableIfGood($('setsub'), $('sub'), 'address');
		enableIfGood($('transfer'), $('transferto'), 'address');
		($('address').onkeyup = $('address').onchange = function() {
			$('setprimary').disabled = !updateGoodness($('address'), 'owned');
			$('setaddress').disabled = !updateGoodness($('address'), 'address');
		})();
		enableIfGood($('disown'), $('refundto'), 'address');
	}
}
$('reserve').onclick = reserve;
($('name').onkeyup = $('name').onchanged = function() { updatenameaction(); })();
($('from').onkeyup = $('from').onkeyup = function() {
	var g = updateGoodness($('from'), 'address');
	$('reserve').disabled = !g;
})()
/*if (e.keyCode == 46 || e.keyCode == 8)*/
/*
theWallet.ConfirmationNeeded(function(error, result) {
	console.log("CONFIRMATION NEEDED:" + JSON.stringify(result));
	last = result.args.operation;
	h = '<button id="confirmPending" onClick="' + "theWallet.confirm.sendTransaction('" + result.args.operation + "', {from: spruce(document.getElementById('from').value)})" + '">Confirm ' + result.args.operation + '</button>';
	document.getElementById("pending").innerHTML = h;
});
theWallet.MultiTransact(function(error, result) {
	console.log("TXDONE:" + JSON.stringify(result));
	if (last == result.args.operation)
	{
		document.getElementById("pending").innerHTML = "";
		last = null;
	}
});
theWallet.Confirmation(function(error, result) {
	console.log("CONFIRM:" + JSON.stringify(result));
	if (last == result.args.operation)
	{
		h = '<div>by ' + result.args.owner + "</div>";
		document.getElementById("pending").innerHTML += h;
		if (spruce(result.args.owner) == spruce(document.getElementById("from").value))
			document.getElementById("confirmPending").disabled += true;
	}
});
*/
</script>
</body>
 </head>
  <body>
  	<script>
  	var x = 42;
//TODO: this should just be:
// import("Config");
// import("NameReg");
var Config = web3.eth.contractFromAbi([{"constant":true,"inputs":[{"name":"service","type":"uint256"}],"name":"lookup","outputs":[{"name":"a","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"unregister","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"service","type":"address"}],"name":"register","outputs":[],"type":"function"},{"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"ServiceChanged","type":"event"}]);
var NameReg = web3.eth.contractFromAbi([{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getName","outputs":[{"name":"o_name","type":"string32"}],"type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string32"}],"name":"register","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"name","type":"string32"}],"name":"addressOf","outputs":[{"name":"addr","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"string32"}],"name":"getAddress","outputs":[{"name":"o_owner","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"unregister","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"nameOf","outputs":[{"name":"name","type":"string32"}],"type":"function"},{"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"AddressRegistered","type":"event"},{"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"AddressDeregistered","type":"event"}]);
var theNameReg;
var w;
var regName = function()
{
	var name = document.getElementById("regname").value;
	if (name != "")
			theNameReg.register(name);
}
var lookupName = function()
{
	var a = theNameReg.addressOf(document.getElementById("name").value);
	document.getElementById("addr").value = +web3.toDecimal(a) ? a.substring(2) : "";
}
var lookupAddr = function()
{
	document.getElementById("name").value = theNameReg.nameOf("0x" + document.getElementById("addr").value);
}
theNameReg = NameReg(Config().lookup(1));
w = web3.eth.watch({'address': theNameReg.address, 'topics': web3.eth.accounts[0]});
w.changed(function(d) { document.getElementById("yourname").innerHTML = theNameReg.nameOf(web3.eth.accounts[0]); });
  	</script>
    <h1>NameReg</h1>
	<h2>Your Name</h2>
	<div id="yourname"></div>
    <h2>Lookup</h2>
    <div>
      <label for="name">Name: </label>
      <input id="name" type="text" value="" onkeyup="lookupName()">
      <label for="addr">Address: </label>
      <input id="addr" type="text" value="" onkeyup="lookupAddr()">
    </div>
    <h2>Register Name</h2>
    <div>
      <label for="name">Name: </label>
      <input id="regname" type="text" value="">
      <button onclick="regName()">Register</button>
      <button onclick="theNameReg.unregister()">Unregister</button>
    </div>
    <!--h2>Register Domain</h2>
    <div>
      <label for="name">IP/Web domain: </label>
      <input id="ip" type="text" value="">
      <label for="name">Ethereum Domain: </label>
      <input id="domain" type="text" value="">
      <span>.eth</span>
      <button onclick="regDomain()">Register</button>
    </div-->

   <script>
document.getElementById("yourname").innerHTML = theNameReg.nameOf(web3.eth.accounts[0]);
    </script>
    <span id="test"></span>
<head><script src="scripts/web3.min.js"></script><script src="scripts/angular.min.js"></script><script src="scripts/underscore-min.js"></script><script src="scripts/sha3.min.js"></script><script src="scripts/filtered_list.js"></script><script src="config.js"></script><script src="scripts/main.js"></script><script src="scripts/tx_in_progress.js"></script><script src="scripts/dialogMessage.js"></script><link rel="stylesheet" type="text/css" href="styles/main.css"/><link rel="stylesheet" type="text/css" href="styles/bootstrap.min.css"/></head><body ng-app="listlogs"><div ng-controller="ListLogsCtrl"><div><div><span>Logs</span></div><div ng-repeat="L in logs.logs"><span style="color:blue" ng-show="L.status == 'confirmed'">{{ L.args.value }}, {{ L.blockNumber }}</span><span style="color:green" ng-show="L.status == 'confirming'">{{ L.args.value }}, {{ L.blockNumber }}</span><span style="color:yellow" ng-show="L.status == 'pending'">{{ L.args.value }}, {{ L.blockNumber }}</span><span style="color:orange" ng-show="L.status == 'dblspent'">{{ L.args.value }}, {{ L.blockNumber }}</span></div><div><span>Boundary: {{ boundary }}</span></div><div><span>Latest block: {{ latestBlock }}</span></div><div><span>Your address</span><select ng-model="myAccount" ng-options="x for x in accounts"></select></div><div><input type="text" ng-model="logString"/><button ng-click="addLog()" class="btn">Add log</button><button ng-click="addBreak()" class="btn">Add break</button></div></div></div></body>
 <script src="graph.js"></script>
<div style="width: 250px; height: 200px; margin: 40px">
<table class="tb">
    <tr>
        <td class="raise4"> To: </td>
        <td> <input type="text" id="address"/> </td>
    </tr>
    <tr>
        <td class="raise4">  </td>
        <td> <button class="btn" style="margin-bottom: 20px" onclick="initiate()"> Connect </button> </td>
    </tr>
    <tr>
        <td class="raise4"> Check from: </td>
        <td> <input type="text" id="checkfrom"/> </td>
    </tr>
    <tr>
        <td class="raise4"> Check to: </td>
        <td> <input type="text" id="checkto"/> </td>
    </tr>
    <tr>
        <td class="raise4">  </td>
        <td> <button class="btn" style="margin-bottom: 20px" onclick="check()"> Check </button> </td>
    </tr>
    <tr>
        <td class="raise4"> Result: </td>
        <td class="raise4" id="result"> nothing yet </td>
    </tr>
</table>
</div>
</body>
</script>
<title>Gavsino - The Ubiquitous Casino</title>
</head>
<body>
<h1>Gavsino - The Ubiquitous Casino</h1>
<div>
<div style="float: right; background: #fee; width: 15em; height: 30em">
<h2>Bets</h2>
<div id="bets">
</div>
</div>
<div style="">
<h2>Shares</h2>
<div>Shares held: <span id="myshares"></span> shares (worth <span id="mysharesvalue"></span>) of <span id="totalshares"></span> (worth <span id="equity"></span>).</div>
<div>Amount: <input id="sharesamount" value="1"></input> finney = <span id="sharesofvalue"></span> shares.</div>
<div><button id="buyIn" onClick="buyIn(document.getElementById('sharesamount').value)">buy in</button><button id="cashOut" onClick="cashOut(document.getElementById('sharesofvalue').innerHTML)">cash out</button></div>
<h2>Bet</h2>
<div>Amount: <input id="amount" value="1"></input> finney</div>
<div>Probability: <input id="pIn256" value="128"></input> / 256</div>
<div><button id="bet" onClick="newTicket(document.getElementById('amount').value, document.getElementById('pIn256').value)">bet</button></div>
</div>
</div>
<script>
document.getElementById('sharesamount').oninput = function() { console.log("HELLO"); sharesamountChanged(); };
// TODO: Remove once JS initial event is fixed.
refreshHoldings();
refreshTickets();
//web3.eth.watch().changed(refreshTickets);
</script>
</body>
</head>
<body>

<div id="top">Ethereum General Exchange</div>

<div id="ourordersout">
	<div class="orderbook">
		<h1>Orders</h1>
		<ul id="ourorders" class="orders">
		</ul>
	</div>
</div>

<div id="orderbooks">
</div>

<div id="controls">
<div>Want <input id="orderwant"></input> <select id="orderwantname"></select>, pay <input id="orderhave"></input> <select id="orderhavename"></select> <button id="approve" class="invalid">Approve</button><button id="execute">Execute</button></div>
</div>

<script>
var configAddr = "0x661005d2720d855f1d9976f88bb10c1a3398c77f";
var myAddrs = eth.accounts;
var nameRegAddr;
var coinsAddr;
var exchangeAddr;
var coinsWatch;
var exchangeWatch;
var updateExchange;
var updateCoins;
var updateApproveButton;
var deleteOrder;
var coins;
var pretty = function(x) {
	var ret = eth.stateAt(nameRegAddr, x, 0);
	if (+dev.toDecimal(ret))
		return "<b>" + dev.toAscii(ret) + "</b>";
	return x.substr(2);
}
var refresh = function() {
	nameRegAddr = eth.stateAt(configAddr, "0", 0);
	var oC = coinsAddr;
	coinsAddr = eth.stateAt(configAddr, "1", 0);
	var oE = exchangeAddr;
	exchangeAddr = eth.stateAt(configAddr, "3", 0);
	
//	env.note(coinsAddr + "/" + oC + "/" + exchangeAddr + "/" + oE + "/" + nameRegAddr);
	if (coinsAddr != oC)
	{
		if (coinsWatch)
			coinsWatch.uninstall();
		if (+dev.toDecimal(coinsAddr))
		{
			coinsWatch = eth.watch({ altered: coinsAddr });
			coinsWatch.changed(updateCoins);
		}
	}
	if (exchangeAddr != oE)
	{eth.stateAt(coinsAddr, 1)
		if (exchangeWatch)
			exchangeWatch.uninstall();
		if (+dev.toDecimal(exchangeAddr))
		{
			exchangeWatch = eth.watch({ altered: exchangeAddr });
			exchangeWatch.changed(updateExchange);
		}
	}
}
var getCoins = function() {
	var n = eth.stateAt(coinsAddr, 0);
	var ret = { "ETH": { 'addr': '', 'denom': 1e18 } };
	for (var i = 1; i <= n; ++i)
	{
		var name = dev.toAscii(eth.stateAt(coinsAddr, i));
		var addr = eth.stateAt(coinsAddr, eth.stateAt(coinsAddr, i));
		var denom = +dev.toDecimal(eth.stateAt(coinsAddr, dev.sha3(eth.stateAt(coinsAddr, i)))) || 1;
//		env.note(n + ":" + name + "/" + addr + "/" + denom);
		ret[name] = { 'addr': addr, 'denom': denom };
	}
	return ret;
}
/// Get all of the order that are after some "have" currency in exchange for some "want" currency.
var getOrderBook = function(have, want, addrs, dontCoalesce) {
	var ret = [];
	var haveAddr = coins[have].addr;
	var wantAddr = coins[want].addr;
	var list = dev.sha3(haveAddr, wantAddr);
	var haveFactor = coins[have].denom;
	var wantFactor = coins[want].denom;
	var last;
	for (var s = eth.stateAt(exchangeAddr, list, 0); +dev.toDecimal(s); s = eth.stateAt(exchangeAddr, s, 0))
	{
		var id = eth.stateAt(exchangeAddr, dev.offset(s, 2), 0);
		if (!addrs || addrs.indexOf(id) > -1)
		{
			var rateRaw = eth.stateAt(exchangeAddr, dev.offset(s, 1), 0);	// have/want
			var rate = dev.fromFixed(rateRaw);	// have/want
			var irate = 1.0 / rate;											// want/have
			var wantRaw = eth.stateAt(exchangeAddr, dev.offset(s, 3), 0);
			var haveRaw = dev.toDecimal(wantRaw) * rate;
			var wantApparent = Math.round(wantRaw / wantFactor * 1000000) / 1000000;
			var haveApparent = Math.round(haveRaw / haveFactor * 1000000) / 1000000;
			var rateApparent = Math.round(rate * wantFactor / haveFactor * 1000000) / 1000000;
			var irateApparent = Math.round(irate * haveFactor / wantFactor * 1000000) / 1000000;
		
			if (!dontCoalesce && last && last.rate == rate)
			{
				last.haveRaw += haveRaw;
				last.wantRaw += wantRaw;
				last.haveApparent += haveApparent;
				last.wantApparent += wantApparent;
			}
			else
			{
				if (last)
					ret.push(last);
				last = {'rateRaw': rateRaw, 'rate': rate, 'irate': irate, 'haveRaw': haveRaw, 'wantRaw': wantRaw, 'haveApparent': haveApparent, 'wantApparent': wantApparent, 'rateApparent': rateApparent, 'irateApparent': irateApparent, 'id': id};
			}
		}
	}
	if (last)
		ret.push(last);
	return ret;
}
var getQuote = function(matches, w, inv) {
	var n = 0;
	for (var i in matches)
	{
		var m = matches[i];
		if (inv)
		{
			if (w <= m.wantApparent)	//got enough here
			{
				n += w * m.rateApparent;
				return n;
			}
			n += m.haveApparent;
			w -= m.wantApparent;
		}
		else
		{
			if (w <= m.haveApparent)	//got enough here
			{
				n += w * m.irateApparent;
				return n;
			}
			n += m.wantApparent;
			w -= m.haveApparent;
		}
	}
	return null;
}
var updateQuote = function() {
	var ob = getOrderBook(document.getElementById('orderwantname').value, document.getElementById('orderhavename').value);
	var q = getQuote(ob, document.getElementById('orderwant').value);
	document.getElementById('orderhave').placeholder = q ? q : "No Liquidity";
	var pq = getQuote(ob, document.getElementById('orderhave').value, 1);
	document.getElementById('orderwant').placeholder = pq ? pq : "No Liquidity";
	
	// TODO: check balances & highlight bad fields.
}
var updateHaveSelection = function() {
	var haveName = document.getElementById('orderhavename').value;
	var wantName = document.getElementById('orderwantname').value;
	document.getElementById("orderhavename").innerHTML = "";
	for (var i in coins)
		if (i != wantName)
			document.getElementById("orderhavename").innerHTML += '<option ' + (i == haveName ? "selected " : "") + 'id="orderhave' + i + '">' + i + '</option>';
}
var execute = function() {
	var haveName = document.getElementById('orderhavename').value;
	var have = (document.getElementById('orderhave').value || document.getElementById('orderhave').placeholder) * coins[haveName].denom;
	var wantName = document.getElementById('orderwantname').value;
	var want = (document.getElementById('orderwant').value || document.getElementById('orderwant').placeholder) * coins[wantName].denom;
	eth.transact({ 'to': exchangeAddr, 'value': (haveName == "ETH" ? have+'' : '0'	), 'data': [ 'new', coins[haveName].addr, have+'', coins[wantName].addr, want+'' ] });
}
var approve = function() {
	var addr = coins[document.getElementById('orderhavename').value].addr;
	if (en)
		for (var k in eth.accounts)
			eth.transact({'from': eth.accounts[k], 'to': addr, data: ['approve', exchangeAddr]});
	updateApproveButton();
}
document.getElementById('orderhave').oninput = document.getElementById('orderwant').oninput = updateQuote;
document.getElementById('orderhavename').onchange = function() { updateApproveButton(); updateQuote(); };
document.getElementById('orderwantname').onchange = function() { updateHaveSelection(); updateQuote(); };
document.getElementById('execute').onclick = execute;
document.getElementById('approve').onclick = approve;
var renderOurs = function(have, want) {
	var haveAddr = coins[have].addr;
	var wantAddr = coins[want].addr;
	var myAddrs = eth.accounts;
	var others = getOrderBook(have, want, myAddrs, true);
	var oret = '';
	for (var i in others)
	{
		var s = others[i];
		if (+s.haveRaw)
			oret += '<li class="our order">' +
				'<span class="margin">&nbsp;</span><button class="delete" onclick="deleteOrder(\'' + haveAddr + '\',\'' + wantAddr + '\',\'' + s.rateRaw + '\',\'' + s.id + '\')">delete</button><div class="body">&nbsp;'+
				'<span class="have"><span class="value">' + s.haveApparent + '</span> <span class="units">' + have + '</span> <span class="verb">offered</span></span>'+
				'<span class="want">' + s.wantApparent + ' <span class="units">' + want + '</span> <span class="verb">wanted</span></span>'+
				'<span class="rate"><span class="verb">at</span> <span class="value">' + s.irateApparent + '</span> <span class="units">' + want + '/' + have + '</span></span>'+
				'</div></li>';
	}
	return oret;
}
var renderExchange = function(have, want) {
	var matches = getOrderBook(want, have);		
	var others = getOrderBook(have, want);		
	if (!matches.length && !others.length)
		return '';
	var oret = '';
	for (var i in others)
	{
		var s = others[i];
		if (+s.haveRaw)
			oret = '<li class="existing order' + (i-0 ? '' : ' best') + '">' +
				'<span class="margin">&nbsp;</span><div class="body">&nbsp;'+
				'<span class="have"><span class="value">' + s.haveApparent + '</span> <span class="units">' + have + '</span> <span class="verb">total</span></span>'+
				'<span class="want">' + s.wantApparent + ' <span class="units">' + want + '</span></span>'+
				'<span class="rate"><span class="verb">at</span> <span class="value">' + s.irateApparent + '</span> <span class="units">' + want + '/' + have + '</span></span>'+
				'</div></li>' + oret;
		if (i-0 >= 10)
			break;
	}
	c = 0;
	for (var i in matches)
	{
		var s = matches[i];
		if (+s.haveRaw)
			oret += '<li class="matching order' + (i-0 ? '' : ' best') + '">' +
				'<span class="margin">' + (i-0 ? '&nbsp;' : '&#9660;') + '</span><div class="body">&nbsp;'+
				'<span class="have"><span class="value">' + s.wantApparent + '</span> <span class="units">' + have + '</span> <span class="verb">total</span></span>'+
				'<span class="want">' + s.haveApparent + ' <span class="units">' + want + '</span></span>'+
				'<span class="rate"><span class="verb">at</span> <span class="value">' + s.rateApparent + '</span> <span class="units">' + want + '/' + have + '</span></span>'+
				'</div></li>';
	}
	oret = '<ul class="orders">' + oret + '</ul>';
	return '<div class="orderbook"><h1>' + have + '<span style="color: rgba(0, 0, 0, 0.5); position: relative; top: -1.5pt; margin-left: 4pt; margin-right: 4pt;">&#9658;</span>' + want + '</h1>' + oret + '</div>';
}
// TODO display all transactions.
updateCoins = function() {
//	env.note("updateCoins");
	coins = getCoins();
//	env.note(JSON.stringify(coins));
	var a = false;
	for (var i in coins)
	{
		if (!document.getElementById("orderwant" + i))
		{
			document.getElementById("orderwantname").innerHTML += '<option id="orderwant' + i + '">' + i + '</option>';
			a = true;
		}
		if (!document.getElementById("orderhave" + i) && i != document.getElementById('orderwantname').value)
		{
			document.getElementById("orderhavename").innerHTML += '<option id="orderhave' + i + '">' + i + '</option>';
			a = true;
		}
	}
	
	if (a)
	{
		updateExchange();
		updateHaveSelection();
		updateApproveButton();
		updateQuote();
	}
}
updateApproveButton = function() {
	var addr = coins[document.getElementById('orderhavename').value].addr;
	var en = !+dev.toDecimal(addr);
	if (en)
		for (var k in eth.accounts)
			en = en && +dev.toDecimal(eth.call({'from': eth.accounts[k], 'to': addr, data: ['approved', exchangeAddr]}));
	document.getElementById("approve").classList = en ? [] : ['invalid'];
	document.getElementById("execute").classList = en ? ['invalid'] : [];
}
updateExchange = function() {
	// update the display
	
	document.getElementById("orderbooks").innerHTML = "";
	document.getElementById("ourorders").innerHTML = "";
	
	for (var i in coins)
		for (var j in coins)
			if (i != j)
			{
				document.getElementById("orderbooks").innerHTML += renderExchange(i, j);
				document.getElementById("ourorders").innerHTML += renderOurs(i, j);
			}
}
deleteOrder = function(have, want, rate, who) {
	for (var i in eth.accounts)
	{
		var k = eth.accounts[i];
		if (k == who)
			eth.transact({'from': k, 'to': exchangeAddr, 'data': ['delete', have+'', want+'', rate]});
	}
}
//approve contract
//approved contract[, person]
//delete have want rate
eth.watch("chain").changed(refresh);
</script>
<script src="common.js"></script>
<script src="campaign.js"></script>
<div style="width: 250px; height: 200px; margin: 40px">
<table class="tb" id="notdone">
    <tr>
        <td class="raise4"> Recipient: </td>
        <td class="raise4" id="recipient">  </td>
    </tr>
    <tr>
        <td class="raise4"> Goal: </td>
        <td class="raise4" id="goal">  </td>
    </tr>
    <tr>
        <td class="raise4"> Time left: </td>
        <td class="raise4" id="timeleft">  </td>
    </tr>
    <tr>
        <td class="raise4"> Contributed: </td>
        <td class="raise4" id="contributed">  </td>
    </tr>
    <tr>
        <td class="raise4"> Value: </td>
        <td> <input type="text" id="value"/> </td>
    </tr>
    <tr>
        <td class="raise4">  </td>
        <td> <button class="btn" style="margin-bottom: 20px" onclick="contribute()"> Contribute </button> </td>
    </tr>
    <tr>
        <td class="raise4">  </td>
        <td class="raise4">
            <a id="progress" href=""></a>
        </td>
    </tr>
</table>
<table class="tb">
    <center id="done" style="display: none">Done!</center>
</table>
</div>
<script src="common.js"></script>
<script src="campaign_setup.js"></script>
<div style="width: 250px; height: 200px; margin: 40px">
<table class="tb">
    <tr>
        <td class="raise4"> Address: </td>
        <td> <input type="text" id="address"/> </td>
    </tr>
    <tr>
        <td class="raise4"> Goal: </td>
        <td> <input type="text" id="goal"/> </td>
    </tr>
    <tr>
        <td class="raise4"> Time limit (days): </td>
        <td> <input type="text" id="timelimit"/> </td>
    </tr>
    <tr>
        <td class="raise4">  </td>
        <td> <button class="btn" style="margin-bottom: 20px" onclick="initiate()"> Create </button> </td>
    </tr>
    <tr>
        <td class="raise4">  </td>
        <td class="raise4">
            <a id="campaign_addr" href=""></a>
        </td>
    </tr>
</table>
</div>
</body>
</head>
<body>
<div id="top">
&nbsp;
<div id="balance"><span id="gav">?</span> <span class="units">GAV</span></div>
<div id="addr">?</div>
</div>
<div style="margin: 16pt">
<div style="text-align: center">
<div id="title"><img src="gavcoin.png" width="96" height="96" valign="top"/><span style="font-size: 35pt">GAV</span><span>coin</span></div>
</div>
<ul id="latest">
</ul>
<div id="controls">
	<input id="val" value=""></input> <span class="units">GAV</span>
	to <input id="to"></input>
	<button id="send" onClick="dosend()">send</button>
	<button id="mine" onClick="domine()">mine</button>
</div>
</div>
<script>
var Config = web3.eth.contractFromAbi([{"constant":true,"inputs":[{"name":"service","type":"uint256"}],"name":"lookup","outputs":[{"name":"a","type":"address"}]},{"constant":false,"inputs":[],"name":"kill","outputs":[]},{"constant":false,"inputs":[{"name":"id","type":"uint256"}],"name":"unregister","outputs":[]},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"service","type":"address"}],"name":"register","outputs":[]}]);
var NameReg = web3.eth.contractFromAbi([{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getName","outputs":[{"name":"o_name","type":"string32"}]},{"constant":false,"inputs":[{"name":"name","type":"string32"}],"name":"register","outputs":[]},{"constant":true,"inputs":[{"name":"name","type":"string32"}],"name":"addressOf","outputs":[{"name":"addr","type":"address"}]},{"constant":true,"inputs":[{"name":"_name","type":"string32"}],"name":"getAddress","outputs":[{"name":"o_owner","type":"address"}]},{"constant":false,"inputs":[],"name":"unregister","outputs":[]},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"nameOf","outputs":[{"name":"name","type":"string32"}]}]);
var CoinReg = web3.eth.contractFromAbi([{"constant":true,"inputs":[],"name":"count","outputs":[{"name":"r","type":"uint256"}]},{"constant":true,"inputs":[{"name":"i","type":"uint256"}],"name":"info","outputs":[{"name":"addr","type":"address"},{"name":"name","type":"string3"},{"name":"denom","type":"uint256"}]},{"constant":false,"inputs":[{"name":"name","type":"string3"},{"name":"denom","type":"uint256"}],"name":"register","outputs":[]},{"constant":false,"inputs":[],"name":"unregister","outputs":[]}]);
var GavCoin = web3.eth.contractFromAbi([{"constant":true,"inputs":[{"name":"_target","type":"address"},{"name":"_proxy","type":"address"}],"name":"isApprovedFor","outputs":[{"name":"_r","type":"bool"}]},{"constant":true,"inputs":[{"name":"_proxy","type":"address"}],"name":"isApproved","outputs":[{"name":"_r","type":"bool"}]},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_val","type":"uint256"},{"name":"_to","type":"address"}],"name":"sendCoinFrom","outputs":[]},{"constant":false,"inputs":[],"name":"mine","outputs":[]},{"constant":true,"inputs":[{"name":"_a","type":"address"}],"name":"coinBalanceOf","outputs":[{"name":"_r","type":"uint256"}]},{"constant":false,"inputs":[{"name":"_val","type":"uint256"},{"name":"_to","type":"address"}],"name":"sendCoin","outputs":[]},{"constant":true,"inputs":[],"name":"coinBalance","outputs":[{"name":"_r","type":"uint256"}]},{"constant":false,"inputs":[{"name":"_a","type":"address"}],"name":"approve","outputs":[]}]);
var theNameReg;
var theGavCoin;
var checkto = function() {
	var s = "";
	var to = document.getElementById('to').value;
	var dest;
	if (to.length == 40)
	{
		dest = "0x" + to;
		if (+web3.toDecimal(eth.balanceAt(dest, 0)))
			s = "valid";
		else
			s = "maybevalid";
	}
	else
	{
		var dest = eth.stateAt(nameRegAddr, web3.fromAscii(to), 0);
		if (+web3.toDecimal(dest))
			s = "valid";
		else
		{
			s = "invalid";
			dest = "";
		}
	}
	document.getElementById('to').className = s
	document.getElementById('send').className = (document.getElementById('val').className != "invalid" && document.getElementById('to').className != "invalid") ? "valid" : "invalid";
	return dest;
}
var totalGav = function() {
	var confirmedGav = 0;
	var unconfirmedGav = 0;
	myAddrs.forEach(function(x) { confirmedGav -=- web3.toDecimal(eth.stateAt(gavCoinAddr, x, -1)); unconfirmedGav -=- web3.toDecimal(eth.stateAt(gavCoinAddr, x, 0)); });
	return [confirmedGav, unconfirmedGav];
}
var checkvalue = function() {
	var s = "";
	var amount = +document.getElementById('val').value;
	var tg = totalGav();
	if (amount > 0 && amount <= tg[1])
		if (amount <= tg[0])
			s = "valid";
		else
			s = "maybevalid";
	else
	{
		s = "invalid";
		amount = "";
	}
	document.getElementById('val').className = s;
	document.getElementById('send').className = (document.getElementById('val').className != "invalid" && document.getElementById('to').className != "invalid") ? "valid" : "invalid";
	return (amount * 1000) + '';
}
document.getElementById('val').oninput = checkvalue; 
document.getElementById('to').oninput = checkto;
var dosend = function() {
	var amount = checkvalue();
	var to = checkto();
	if (amount && to)
	{
		var l = +amount;
		eth.accounts.forEach(function(x) {
			if (l)
			{
				var t = +web3.toDecimal(eth.stateAt(gavCoinAddr, x, 0));
				if (t > l)
					t = l;
				if (t)
				{
					eth.transact({'from': x, 'to': gavCoinAddr, 'data': ['send', to, t + ''], 'gas': '2000', 'gasPrice': eth.gasPrice});
					l -= t;
				}
			}
		});
	}
}
var domine = function() {
	eth.transact({ 'to': gavCoinAddr });
}
var pretty = function(x) {
	var ret = eth.stateAt(nameRegAddr, x, 0);
	if (web3.toDecimal(ret) - 0)
		return "<b>" + web3.toAscii(ret) + "</b>";
	return x.substr(2);
}
var oGCA;
var gcTxWatch;
var latest;
var updateGavCoinTxs;
var refresh = function() {
	theNameReg = NameReg(Config().lookup(1));
	theGavCoin = theNameReg.addressOf('GavCoin');
	if (theGavCoin.address != oGCA)
	{
		if (gcTxWatch)
			gcTxWatch.uninstall();
		if (web3.eth.toDecimal(theGavCoin.address))
		{
			gcTxWatch = web3.eth.watch({'max': 15, 'address': theGavCoin.address, 'topics': web3.eth.address });
			gcTxWatch.changed(updateGavCoinTxs);
			return;	// refresh will be called by the above - no need to repeat.
		}
	}
	
	var myAddrs = web3.accounts;
	var cv = checkvalue();
	var ct = checkto();
	var blocksToMine = web3.toDecimal(web3.eth.number) - web3.toDecimal(web3.eth.stateAt(gavCoinAddr, "0x42", 0));
	document.getElementById('mine').className = (blocksToMine ? "valid" : "invalid");
	document.getElementById('mine').innerHTML = blocksToMine == 1 ? "mine" : "mine " + blocksToMine;
	document.getElementById('addr').innerHTML = myAddrs[0].substr(2);
	var confirmedGav = 0;
	var unconfirmedGav = 0;
	myAddrs.forEach(function(x) {
		web3.eth.setBlock(web3.eth.number);
		confirmedGav -=- web3.toDecimal(theGavCoin.coinBalanceOf(x));
		web3.eth.setBlock(0);
		unconfirmedGav -=- web3.toDecimal(theGavCoin.coinBalanceOf(x));
	});
	document.getElementById('gav').innerHTML = (unconfirmedGav > confirmedGav ? confirmedGav / 1000 + '<span id="unc"> (+ <span>' + (unconfirmedGav - confirmedGav) / 1000 + "</span> unconfirmed)</span>" : unconfirmedGav / 1000);
	var lh = document.getElementById("latest");
	lh.innerHTML = "";
	var s = latest.length - 1;
	for (var i = 0; i < latest.length; ++i)
	{
		var l = latest[/*s -*/ i];
		if (+web3.toDecimal(l.to))
		{
			var mine = !+web3.toDecimal(l.input) || web3.toAscii(l.input).substr(0, 4) == "mine";
			var send = web3.toAscii(l.input).substr(0, 4) == "send";
			if (mine || send)
			{
				var dest;
				if (send)
					dest = "0x" + l.input.substr(90, 40);
				var wesent = myAddrs.indexOf(l.from) != -1 || (l.input.length > 96 * 2 + 2 && myAddrs.indexOf(l.origin) != -1);
				var wegot = myAddrs.indexOf(dest) != -1;
				var value = mine ? web3.toDecimal(l.output) * 1000 * ((myAddrs.indexOf(l.coinbase) != -1 ? 1 : 0) + (myAddrs.indexOf(l.from) != -1 ? 1 : 0)) : web3.toDecimal("0x" + l.input.substr(130, 64));
				var age = eth.number - l.number;
//				env.note(eth.number + " " + l.number + " " + age);
				lh.innerHTML = lh.innerHTML + '<li>' +
					'<span class="timestamp">' + new Date(l.timestamp * 1000).toLocaleString() + "</span>" +
					(mine ? '<span class="mine"><span class="name">MINE' : wesent ? wegot ? '<span class="xfer"><span class="name">XFER' : '<span class="out"><span class="name">OUT' : '<span class="in"><span class="name">IN') + '</span>' +
					'<span class="value">' + (value / 1000) + '<span class="units">GAV</span></span>' +
					'' + (mine ? '' : send ? wesent ? wegot ? '' : '<span class="to"><span class="ind">&gt;</span>' + pretty(dest) + '</span>' : '<span class="from"><span class="ind">&lt;</span>' + pretty(l.from) + '</span>' : '') + '</span>' +
					(age ? age > 10 ? '' :
						'<span class="confirms">' + age + ' CONFIRMATIONS</span>' :
						'<span class="unconfirmed">UNCONFIRMED</span>'
					) +
				'</li>';
			}
		}
	}
}
updateGavCoinTxs = function() {
	latest = gcTxWatch.messages();
	refresh();
}
eth.watch("chain").changed(refresh);
</script>
</body>
</head>
<body>
<h1>Chat</h1>
<div id="chat">
<div>
	<button id="setRoom" onClick="roomChanged()">set room</button>
	<div id="roomdiv"><input id="room" value="general"/></div>
</div>
<div style="clear: both"></div>
<div id="log"></div>
<div id="in">
	<input id="name"/>
	<button id="post" onClick="post()">send</button>
	<div id="entrydiv"><input id="entry"/></div>
</div>
</div>
<script>
//web3.setProvider(new web3.providers.HttpRpcProvider("http://localhost:8080"));
function def(a, b) { return a ? a : b; }
/*
var myIdentity = db.get("chat", "identity");
if (!+web3.toDecimal(myIdentity) || !shh.haveIdentity(myIdentity))
{
	myIdentity = shh.newIdentity();
	db.put("chat", "identity", myIdentity);
}
*/
var shh = web3.shh;
var db = web3.db;
var myIdentity;
var myIdPromise = db.get('chat', 'identity').then(function (res) {
    return shh.haveIdentity(res).then(function (have) {
        if (!have) {
            return shh.newIdentity().then(function (newId) {
                db.put('chat', 'identity', newId);
                return newId;
            });
        }
        return res;
    });
}).then(function (id) {
    myIdentity = id;
    return id;
}).catch(function (err) {
});
var name;
var room;
var names = {};
var invNames = {};
var onMessage;
var onPrivateMessage;
var lastNameSend;
function newMessage(ms)
{
    ms.forEach(function (m) {
        document.getElementById('log').innerHTML = document.getElementById('log').innerHTML +
            '<div class="' + (+web3.toDecimal(m.to) ? "private" : "room") + '"><span class="timestamp">[' + new Date(m.sent * 1000).toLocaleTimeString() + ']</span> ' +
            '<span class="who">' + (names[m.from] ? names[m.from] : m.from.substr(2, 8)) + '</span>' +
            (+web3.toDecimal(m.to) ?
                ' -> <span class="me">' + name + '</span>: ' :
                ': ') +
            '<span class="message">' + web3.toAscii(m.payload) + '</span></div>';
        document.getElementById('log').scrollTop = '1500000';
    });
}
var newName = function(ms)
{
    ms.forEach(function (m) {
        if (names[m.from])
            delete invNames[names[m.from]];
        names[m.from] = web3.toAscii(m.payload, 0);
        invNames[names[m.from]] = m.from;
    });
}
function nameChanged()
{
	if (name != document.getElementById('name').value.replace(' ', '_') || !lastNameSend || new Date - lastNameSend > 60000)
	{
		name = document.getElementById('name').value.replace(' ', '_');
		db.putString("chat", "name", name);
		shh.post({ from: myIdentity, topic: [web3.fromAscii('chat'), web3.fromAscii('namechange')], payload: web3.fromAscii(name, 0), ttl: 60 });
		lastNameSend = new Date;
	}
}
function roomChanged()
{
	if (onMessage)
		onMessage.uninstall();
	room = document.getElementById('room').value;
	db.putString("chat", "room", room);
	onMessage = shh.watch({ 'topic': [web3.fromAscii('chat'), web3.fromAscii(room)] });
	onMessage.arrived(newMessage);
}
function post()
{
	nameChanged();
	var txt = document.getElementById('entry').value;
	var pm = /^\$([^ ]+):? ?(.*)$/.exec(txt);
	var msg = { from: myIdentity };
	if (pm && invNames[pm[1]])
	{
		msg.to = invNames[pm[1]];
		txt = pm[2];
		msg.topic = [web3.fromAscii('chat'), msg.to];
	}
	else
		msg.topic = [web3.fromAscii('chat'), web3.fromAscii(room)];
	msg.payload = web3.fromAscii(txt, 0);
	shh.post(msg);
	document.getElementById('entry').value = "";
}
function tab(at)
{
	var txt = document.getElementById('entry').value;
	var m = /^([@\$])([^ ]+)$/.exec(txt.substr(0, at));
	if (m)
		for (var n in names)
			if (names[n].substr(0, m[2].length) == m[2])
			{
				document.getElementById('entry').value = txt.substr(0, at - m[2].length) + names[n] + " " + txt.substr(at);
				return true;
			}
	return false;
}
document.getElementById('name').onkeydown = function(event)
{
	if (event.keyCode == 13)
		nameChanged();
}
document.getElementById('room').onkeydown = function(event)
{
	if (event.keyCode == 13)
		roomChanged();
}
document.getElementById('entry').onkeydown = function(event)
{
	if (event.keyCode == 13)
		post();
	else if (event.keyCode == 9 || event.keyCode == 16)
		if (tab(document.getElementById('entry').selectionEnd))
			return false;
	return true;
}
var pmWatch = shh.watch({ 'topic': [web3.fromAscii('chat'), myIdPromise], 'to': myIdPromise });
pmWatch.arrived(function(f) { newMessage(f); });
var nameChangeWatch = shh.watch({ 'topic': [web3.fromAscii('chat'), web3.fromAscii('namechange')] });
nameChangeWatch.arrived(newName);
db.getString('chat', 'room').then(function (res) {
	document.getElementById('room').value = res;
	roomChanged();
});
myIdPromise.then(function() {
	db.getString('chat', 'name').then(function (res) {
		document.getElementById('name').value = res;
		nameChanged();
	});
});
</script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- The above 3 meta tags *must* come first in the head. Any other head content must come *after* these tags -->
  <title>Swarm</title>
  <meta name="twitter:card" value="summary">
  <meta property="og:title" content="Swarm">
  <meta property="og:type" content="article">
  <meta property="og:url" content="https://www.ethereum.org/swarm">
  <meta property="og:image" content="https://ethereum.org/images/wallpaper-homestead.jpg">
  <meta property="og:image:width" content="500">
  <meta property="og:image:height" content="500">
  <meta property="og:description"
    content="Ethereum is a decentralized platform for applications that run exactly as programmed without any chance of fraud, censorship or third-party interference.">
  <link rel="icon" href="./favicon.ico">

  <!-- Bootstrap core CSS -->
  <link href="./css/bootstrap.min.css" rel="stylesheet">

  <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
  <link href="./css/ie10-viewport-bug-workaround.css" rel="stylesheet">

  <!-- Custom styles for this template -->
  <link href="./css/sticky-footer-navbar.css" rel="stylesheet">

  <!-- Just for debugging purposes. Don't actually copy these 2 lines! -->
  <!--[if lt IE 9]><script src="./js/ie8-responsive-file-warning.js"></script><![endif]-->
  <script src="./js/ie-emulation-modes-warning.js"></script>

  <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
  <!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
  <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
  <![endif]-->
  <!-- Font Awesome & Fonts -->
  <script src="https://use.fontawesome.com/9c24f2ebbb.js"></script>
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400" rel="stylesheet">
  <!-- modernizer -->
  <script src="js/modernizr-2.8.3-respond-1.4.2.min.js"></script>
  <!-- from swarm master -->
  <link href="./Swarm_files/css.css" rel="stylesheet" type="text/css">
  <link rel="stylesheet" href="./Swarm_files/frontier.min.css">
  <link rel="stylesheet" href="./Swarm_files/default.min.css">
  <!-- new swarm-home-css -->
  <link rel="stylesheet" href="./Swarm_files/swarm.css">

  <!-- SMOOTH SCROLL -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
  <script>
    $(function () {
      $('a[href*=#]:not([href=#])').click(function () {
        if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
          var target = $(this.hash);
          target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
          if (target.length) {
            $('html,body').animate({
              scrollTop: target.offset().top
            }, 1000);
            return false;
          }
        }
      });
    });
  </script>
  <!-- End of SMOOTH SCROLL -->
</head>

<body class="">
  <!-- Fixed navbar classes: main-tutorial toc  body-class was: MacIn-->
  <nav class="navbar navbar-default navbar-fixed-top">
    <div class="container">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar"
          aria-expanded="false" aria-controls="navbar">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-left" href="#">
          <img style="max-height: 40px; margin: 5px;" src="./images/swarm-logo-2.png">
        </a>
      </div>
      <div id="navbar" class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-right">
          <li class="active"><a href="#intro">Introduction</a></li>
          <li class="active"><a href="#install">Install</a></li>
          <li class="active"><a href="./downloads/">Downloads</a></li>
          <li class="active"><a href="#roadmap">Roadmap</a></li>
          <li class="active"><a href="#research">Research</a></li>
          <li class="active"><a href="#projects">Components</a></li>
          <li class="active"><a href="#talks">Talks</a></li>
          <li class="active"><a href="#media">Media</a></li>
          <li class="active"><a href="#contact">Contact</a></li>
          <!--
          <li class="dropdown">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dropdown <span class="caret"></span></a>
            <ul class="dropdown-menu">
              <li><a href="#">Action</a></li>
              <li><a href="#">Another action</a></li>
              <li><a href="#">Something else here</a></li>
              <li role="separator" class="divider"></li>
              <li class="dropdown-header">Nav header</li>
              <li><a href="#">Separated link</a></li>
              <li><a href="#">One more separated link</a></li>
            </ul>
          </li>
          -->
        </ul>
      </div>
      <!--/.nav-collapse -->
    </div>
  </nav>

  <div id="tutorial-start" class="main-tutorial swarm-page inner-header inner-page">
    <div class="container">
      <div class="row">
        <div class="col-md-6 tutorial scrollme">
          <figure class="swarm scrollme">
            <div data-when="span" data-to="0.6" data-from="0.3" data-opacity="0" data-translatex="-200"
              class="swarm-01 animateme"
              style="opacity: 1; transform: translate3d(0px, 0px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(1, 1, 1);">
            </div>
            <div data-when="span" data-to="0.3" data-from="0.0" data-opacity="0" data-translatex="288"
              data-translatey="-180" class="swarm-02 animateme"
              style="opacity: 1; transform: translate3d(0px, 0px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(1, 1, 1);">
            </div>
            <div data-when="span" data-to="0.4" data-from="0.1" data-opacity="0" data-translatex="144"
              data-translatey="90" class="swarm-03 animateme"
              style="opacity: 1; transform: translate3d(0px, 0px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(1, 1, 1);">
            </div>
            <div data-when="span" data-to="0.5" data-from="0.2" data-opacity="0" data-translatex="-144"
              data-translatey="90" class="swarm-04 animateme"
              style="opacity: 1; transform: translate3d(0px, 0px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(1, 1, 1);">
            </div>
          </figure>
        </div>
        <div class="col-md-6 tutorial scrollme">
          <div class="header-title">
            <h1 data-when="exit" data-from="0" data-to="1" data-translatey="340" data-easing="linear" class="animateme"
              style="opacity: 1; transform: translate3d(0px, 0px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(1, 1, 1);">
              SWARM</h1>
            <h3 data-when="exit" data-from="0" data-to="0.5" data-translatey="200" data-opacity="0" data-easing="linear"
              class="animateme"
              style="opacity: 1; transform: translate3d(0px, 0px, 0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale3d(1, 1, 1);"
              class="swarm-subtitle">
              serverless hosting<br />
              incentivised peer-to-peer storage<br />
              and content distribution
            </h3>
          </div>
        </div>
      </div>
      <!---//row--->
    </div>
    <!---//container--->
  </div>
  <!---//tutorial start / swarm page intro--->

  <!-- Begin page content class for text-align: .text-center-->
  <section id="intro" class="main">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-12 text-left">
          <div class="page-header">
            <h1>Swarm and web3</h1>
          </div>
          <p class="lead"><a href="https://blog.ethereum.org/2016/12/15/swarm-alpha-public-pilot-basics-swarm/">Swarm is
              a distributed storage platform and content distribution service</a>, a native base layer service of the
            ethereum web3 stack. The primary objective of Swarm is to provide a decentralized and redundant store for
            dapp code and data as well as block chain and state data. Swarm is also set out to provide various base
            layer services for web3, including node-to-node messaging, media streaming, decentralised database services
            and scalable state-channel infrastructure for decentralised service economies.</p>
        </div>
      </div>


      <div class="col-xs-12 col-md-12 text-left" style="margin-top:32px">
        <ul class="row frontpage-services">
          <li class="col">
            <i width="50" height="50" class="fa fa-bug icocss"></i>

            <h4>Fault Tolerant</h4>
            <p>Redundant storage: local replication and erasure coding ensures data availability even in the face of
              node dropouts or data loss.</p>
          </li>
          <li class="col">
            <i width="50" height="50" class="fa fa-hand-rock-o icocss"></i>

            <h4>Censorship Resistant</h4>
            <p>Sites cannot be 'taken down': data is stored throughout the network without vulnerable central hubs.</p>
          </li>
          <li class="col">
            <i width="50" height="50" class="fa fa-ban icocss"></i>

            <h4>DDoS Resistant</h4>
            <p>Fully decentralised peer-to-peer network is more resilient against DDoS than any centralised system.</p>
          </li>
          <li class="col">
            <i width="50" height="50" class="fa fa-arrow-circle-o-up icocss"></i>

            <h4>Zero Downtime</h4>
            <p>Redundancy ensures that the network continues to deliver data even when individual nodes go offline.</p>
          </li>
          <li class="col">
            <i width="50" height="50" class="fa fa-refresh icocss"></i>

            <h4>Self-sustaining</h4>
            <p>Built-in incentive system ensures the network's economic viability.</p>
          </li>
        </ul>
      </div>
    </div><!-- //Container -->
  </section><!-- //Section Basics -->

  <section id="built-for-ethereum">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-12 text-left">
          <div class="page-header">
            <h1>Built for Ethereum</h1>
          </div>
          <p class="lead">From the end user's perspective, Swarm is not that different from the world wide web. In the
            background, the difference is that content is hosted on a peer-to-peer storage network instead of individual
            servers. This peer-to-peer network is self-sustaining due to a built-in incentive system which uses
            peer-to-peer accounting and allows trading resources for payment. Swarm is designed to deeply integrate with
            the devp2p multiprotocol network layer of Ethereum as well as with the Ethereum blockchain for domain name
            resolution, service payments and content availability insurance.</p>
        </div>
      </div>
    </div><!-- //Container -->
  </section><!-- //Status -->

  <section id="install">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-12 text-left">
          <div class="page-header">
            <h1>Installing Swarm</h1>
          </div>
          <h3>Install on Ubuntu via PPAs</h3>

          <p>The simplest way to install Swarm on Ubuntu distributions is via the built in launchpad PPAs
            (Personal Package Archives). We provide a single PPA repository that contains our stable releases for Ubuntu
            versions trusty, xenial, artful, bionic and cosmic.</p>

          <p style="font-family: monospace">
            sudo apt-get install software-properties-common<br />
            sudo add-apt-repository -y ppa:ethereum/ethereum<br />

            sudo apt-get update<br />
            sudo apt-get install ethereum-swarm<br />
          </p>

          <p>&nbsp;</p>

          <h3>Installing Swarm from source</h3>
          <p>The latest Swarm source code can be found on Github: <a
              href="https://github.com/ethersphere/swarm"
              target="_blank">https://github.com/ethersphere/swarm</a>.</p>

          <p>To build Swarm from source, you'll need to ensure that you have Go 1.11 installed (or latest
            version).</p>

          <p style="font-family: monospace">
            go get -d github.com/ethersphere/swarm<br />
            go install github.com/ethersphere/swarm/cmd/swarm<br />
          </p>

          <h3>Run Swarm in a Docker container</h3>
          <p>The official Swarm Docker image including documentation on how to run it can be found at <a
              href="https://github.com/ethersphere/swarm-docker"
              target="_blank">https://github.com/ethersphere/swarm-docker</a> or pulled from <a
              href="https://hub.docker.com/r/ethdevops/swarm/" target="_blank">ethdevops/swarm</a>.</p>
        </div>
      </div>
    </div><!-- //Container -->
  </section><!-- //Install -->

  <section id="downloads">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-12 text-left">
          <div class="page-header">
            <h1>Downloads</h1>
          </div>
          <p class="lead">You can find pre-packaged builds of stable and unstable versions of Swarm on our <a
              href="./downloads/">Downloads page</a>.</p>
        </div>
      </div>
    </div><!-- //Container -->
  </section><!-- //Install -->

  <section id="documentation">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-12 text-left">
          <div class="page-header">
            <h1>Documentation</h1>
          </div>
          <p class="lead">
            Swarm documentation can be found at <a target="_blank"
              href="https://swarm-guide.readthedocs.io/">https://swarm-guide.readthedocs.io</a>.</p>

          <p>
            Since Swarm is under active development, new features are constantly being added, tweaked and fine-tuned. In
            order to keep the documentation relatively up to date, the community is encouraged to contribute to the
            guide by submitting pull requests to the <a href="https://github.com/ethersphere/swarm-guide"
              target="_blank">Documentation repository</a>.</p>
        </div>
      </div>
        </div><!-- //Container -->
      </section><!-- //Documentation -->

      <section id="roadmap">
          <div class="container">
            <div class="row">
              <div class="col-xs-12 col-md-12 text-left">
                <div class="page-header">
                  <h1>Roadmap</h1>
                </div>
                  <p class="lead">Swarm is under active development.</p>
                  <p class="lead">Proof-of-Concept 0.3 was <a href="https://blog.ethereum.org/2018/06/21/announcing-swarm-proof-of-concept-release-3/">released</a> in June, 2018.</p>
                  <p class="lead">Proof-of-Concept 0.4 was released in May, 2019.</p>
                  <p>&nbsp;</p>
                  <h2 id="short-term-milestones">Short term milestones</h2>
                  <ul>
                      <li>Stable deployment infrastructure and stable testnet</li>
                      <li>WeTransfer-like file sharing, access control and notifications</li>
                  </ul>
                  <p>&nbsp;</p>
                  <h2 id="upcoming-features">Upcoming features</h2>
                  <h3 id="storage-bzz">Storage / BZZ</h3>
                  <ul>
                      <li>Push syncing and upload progress bars</li>
                      <li>Redundancy with Erasure coding</li>
                      <li>Pinned content</li>
                      <li>Proof of custody challenge protocol</li>
                      <li>Blockchain and state data on Swarm, Eth1.x support</li>
                  </ul>
                  <h3 id="tooling">Tooling</h3>
                  <ul>
                      <li>Lightnode support</li>
                      <li>Clef integration</li>
                      <li>Node splitting</li>
                      <li>Browser support</li>
                  </ul>
                  <h3 id="testing">Testing</h3>
                  <ul>
                    <li>Large scale network simulations</li>
                    <li>Churn and throughput models</li>
                </ul>
                <h3 id="sw3">SW3</h3>
                <ul>
                  <li>Bandwidth accounting Swap</li>
                  <li>Spam protection</li>
                  <li>Incentivised proof of custody</li>
                  <li>Scan and repair</li>
                  <li>Insurance</li>
                </ul>
        </div>
      </div>
    </div><!-- //Container -->
  </section><!-- //Roadmap -->

  <section id="research">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-12 text-left">
          <div class="page-header">
            <h1>Research</h1>
          </div>
          <p class="lead">
            The ethersphere orange paper series is an attempt to provide an umbrella for sharing and publishing
            technical reports of the ongoing research on formal foundations of web3 base layer infrastructure. Our aim
            is to foster synergy and collaboration between various groups and individuals working in the ethersphere.
            The Orange of the orange paper pays hommage to the yellow paper but tainted with the blood sweat and tears
            of cutting edge research.
          </p>
          <h2>Orange papers</h2>
          <ul>
            <li>Viktor Tr&oacute;n, Aron Fischer, D&aacute;niel Nagy A and Zsolt
                    Felf&ouml;ldi, Nick Johnson: swap, swear and swindle: incentive system for Swarm. May 2016 -
                <a href="https://swarm-gateways.net/bzz:/theswarm.eth/ethersphere/orange-papers/1">https://swarm-gateways.net/bzz:/theswarm.eth/ethersphere/orange-papers/1</a>/sw^3.pdf</li>
            <li>Viktor Tr&oacute;n, Aron Fischer, Nick Johnson: smash-proof: auditable
                    storage for Swarm secured by masked audit secret hash. May 2016 - 
                    <a href="https://swarm-gateways.net/bzz:/theswarm.eth/ethersphere/orange-papers/2/smash.pdf">https://swarm-gateways.net/bzz:/theswarm.eth/ethersphere/orange-papers/2/smash.pdf</a>
            </li>
            <li>Viktor Tr&oacute;n, Aron Fischer, Ralph Pilcher, Fabio Barone: swap swear
                    and swindle games: scalable infrastructure for decentralised service economies. Work in progress. June
                    2018. - <a href="https://www.overleaf.com/read/yszmsdqyqbvc">https://www.overleaf.com/read/yszmsdqyqbvc</a>
                    , 
                    <a href="https://swarm-gateways.net/bzz:/ca5f4684b380644c3042fe81f65b3b9a0668e2e3cff53578fb68af8043f3c0b6/">pfd
                        on swarm</a>.
            </li>
            <li>Viktor Tr&oacute;n, Aron Fischer, Daniel A. Nagy. Swarm: a decentralised
                    peer-to-peer network for messaging and storage. Work in progress. June, 2018. - 
                    <a href="https://www.overleaf.com/read/gxhwssqzgfpr">https://www.overleaf.com/read/gxhwssqzgfpr</a>; 
                    <a href="https://swarm-gateways.net/bzz:/4f45ae847fc55afb8bfdc381bae0809a0ce29bafc07b41293838fc7afae95d34/">pdf on swarm</a>.</li>
            <li>Further on papers on PSS, Feeds, POT and Security are in preparation
            </li>
          </ul>
        </div>
      </div>
    </div><!-- //Container -->
  </section><!-- //Research -->

  <section id="projects">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-12 text-left">
          <div class="page-header">
            <h1>Components</h1>
              <h3>BZZ</h3>
              <p class="lead">Scalable distributed storage solution and content distribution network</p>
              <p>A decentralised permissionless cloud storage service with optimal resource
                      allocation which is self-sustaining due to built-in economic incentives. It guarantees data integrity and
                      availability. Users retain sovereign control over their data while enjoying the frictionless experience of
                      accessing it globally. <br/><br/></p>

              <h3>ACT</h3>
              <p class="lead"><a href="https://swarm-guide.readthedocs.io/en/latest/usage/act.html">Access control</a> and Authentication</p>
              <p>Access to encrypted content using a shared passphrase, a public-private key pair
                      or an innovative scalable access control system (ACT) offering users sovereign control over private data as
                      well as scalable user authentication for dapps.<br/><br/></p>

              <h3>PSS</h3>
              <p class="lead">Secure <a href="https://www.youtube.com/watch?v=PmiLWAhLV2A&list=PLbrz7IuP1hrjjxIng6ve173pXZn0JNC4w&index=10">real-time node-to-node push messaging </a></p>
              <p>Send messages real-time between online nodes. The messaging protocol is part of the
              <strong>Web3 Communication Layer</strong>.<br/><br/></p>

              <h3>Feeds</h3>
              <p class="lead">Asynchronous pull messaging</p>
              <p>Publish and discover updates to a topic. Allows publishers to advertise new versions
                      of a mutable resource, allows consumers to discover and subscribe to updates. The feed protocol forms
                      part of the Web3 Communication Layer<br/><br/></p>

              <h3>SW3 (Swap, Swear and Swindle)</h3>
              <p class="lead">Accounting and accountability</p>
              <p>Program economic incentives to drive a service network. SW3 is a base layer
              infrastructure including the SW3 smart-contract suite for decentralised service economies.<br/><br/></p>

              <h3>Swarm DB</h3>
              <p class="lead">Trustless database services</p>
              <p>Represent and manage your data using infinitely scalable data structures.</p>
          </div>
        </div>
      </div>
    </div><!-- //Container -->
  </section><!-- //Projects -->

  <section id="talks" style="margin-top: 22px;">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-12 text-left">
          <div class="page-header" style="border-bottom: 0px;">
            <h1>Talks</h1>
            <p class="lead">Swarm Orange Summits Talks</p>
            <ul>
                <li><a href="https://www.youtube.com/playlist?list%3DPLM508daI9b1tp1fKXheFYGuPOEX6bIoBv&amp;sa=D&amp;ust=1557926225576000">
                  June 2017 Berlin</a></li>
                <li><a href="https://www.youtube.com/playlist?list%3DPLaM7G4Llrb7xNkX0gugDyUm6Z_RrCvWPk&amp;sa=D&amp;ust=1557926225577000">
                  Nov 2017 P2P+Blockchain breakout session Devcon3 Cancun</a></li>
                <li><a href="https://www.youtube.com/playlist?list%3DPL4dz1agfBBEqwAoYN4bEnRe9tXb1E1s31&amp;sa=D&amp;ust=1557926225577000">
                  May 2018 Ljubljana </a></li>
                <li><a href="https://www.youtube.com/playlist?list%3DPLbrz7IuP1hrhmqr8hCoGhZIjsfj-2MbHc&amp;sa=D&amp;ust=1557926225577000">
                  November 2018 Mini Summit Prague </a></li>
                <li><a href="http://summit.ethswarm.org&amp;sa=D&amp;ust=1557926225578000">
                  May 2019 Madrid </a></li>
            </ul>
          </div>
          <p class="lead">Other Swarm-related presentations</p>
          <table class="table table-responsive text-left">
            <tr>
              <td>Descr.</td>
              <td>Links</td>
              <td>Vids</td>
              <td>PDF</td>
            </tr>
            <tr>
              <td>An hour and a half deep dive into technological basis of Swarm, the vision of web3, p2p and blockchain
                and more.</td>
              <td><a target="_blank" href="https://oktahedron.diskordia.org/?podcast=oh003-swarm">Oktahedron podcast.
                  Swarm with Viktor Trón.</a></td>
              <td>-</td>
              <td>-</td>
            </tr>
            <tr>
              <td>Nick Johnson: Ethereum Name System</td>
              <td><a target="_blank"
                  href="https://ethereumfoundation.org/devcon/?session=40-ens-ethereum-domain-name-system">DevCon2,
                  Shanghai, 19th Sep 2016</a></td>
              <td><a target="_blank" href="https://www.youtube.com/watch?v=pLDDbCZXvTE"><i
                    class="fa fa-youtube-play ico-tabl"></i></a></td>
              <td>-</td>
            </tr>
            <tr>
              <td>Viktor Trón, Aron Fischer: Swap, Swear and Swindle. Swarm Incentivisation.</td>
              <td><a target="_blank"
                  href="https://ethereumfoundation.org/devcon/?session=swap-swear-and-swindle-swarm-incetivisation">DevCon2,
                  Shanghai, 19th Sep 2016.</a></td>
              <td><a target="_blank" href="https://www.youtube.com/watch?v=DZbhjnhP5g4"><i
                    class="fa fa-youtube-play ico-tabl"></i></a></td>
              <td><a target="_blank" href="talks/devcon2/sw^3/sw^3-slides.pdf"><i
                    class="fa fa-file-pdf-o ico-tabl"></i></a></td>
            </tr>
            <tr>
              <td>Viktor Trón: Towards Web3 Infrastructure.</td>
              <td>
                <a target="_blank" href="https://ethereumfoundation.org/devcon/?session=12-swarm-research-tbc">Viktor
                  Trón: Towards Web3 Infrastructure.</a>
                <a target="_blank" href="https://ethereumfoundation.org/devcon/?session=12-swarm-research-tbc">DevCon2,
                  Shanghai, 19th Sep 2016.</a>
              </td>
              <td><a target="_blank" href="https://www.youtube.com/watch?v=RF8L6V_E-MM"><i
                    class="fa fa-youtube-play ico-tabl"></i></a></td>
              <td><a target="_blank" href="talks/devcon2/web3/web3-slides.pdf"><i
                    class="fa fa-file-pdf-o ico-tabl"></i></a></td>
            </tr>
            <tr>
              <td>Dániel A. Nagy: Developing Scalable Decentralized Applications for Swarm and Ethereum</td>
              <td><a target="_blank"
                  href="https://ethereumfoundation.org/devcon/?session=developing-scalable-decentralized-applications-for-swarm-ethereum">DevCon2,
                  Shanghai, 19th Sep 2016</a></td>
              <td><a target="_blank" href="https://www.youtube.com/watch?v=xrw9rvee7rc"><i
                    class="fa fa-youtube-play ico-tabl"></i></a></td>
              <td>-</td>
            </tr>
            <tr>
              <td>Viktor Trón, Aron Fischer: Swarm.</td>
              <td><a target="_blank" href="https://www.meetup.com/Amsterdam-Ethereum-Meetup/events/232749871/">Ethereum
                  Meetup, pre-DevCon edition, Amsterdam, 30th Aug 2016.</a></td>
              <td>-</td>
              <td><a target="_blank" href="talks/amsterdam-2016-08-30/amsterdam-swarm-slides.pdf"><i
                    class="fa fa-file-pdf-o ico-tabl"></i></a></td>
            </tr>
            <tr>
              <td>Viktor Trón, Aron Fischer: blockchain and web3.</td>
              <td><a target="_blank" href="http://www.ivir.nl/nl/over-ons/">Institute for Information Law - University
                  of Amsterdam, 2nd Sep 2016.</a></td>
              <td>-</td>
              <td><a target="_blank" href="talks/amsterdam-2016-09-02/ivir-slides.pdf"><i
                    class="fa fa-file-pdf-o ico-tabl"></i></a></td>
            </tr>
            <tr>
              <td>Viktor Trón, Aron Fischer: The rise of the third web.</td>
              <td><a target="_blank" href="https://www.meetup.com/BitcoinWednesday/events/226293637/">Bitcoin Wednesday
                  Amsterdam #39, 7th Sept 2016.</a></td>
              <td>-</td>
              <td><a target="_blank" href="talks/amsterdam-2016-09-07/web3.pdf"><i
                    class="fa fa-file-pdf-o ico-tabl"></i></a></td>
            </tr>
            <tr>
              <td>Aron Fischer, Dániel A. Nagy, Viktor Trón: Swarm - Ethereum.</td>
              <td><a target="_blank" href="http://www.meetup.com/Berlin-Ethereum-Meetup/events/231044919/">Ethereum
                  Meetup, Berlin, 25 May 2016.</a></td>
              <td><a target="_blank" href="https://www.youtube.com/watch?v=Y9kch84cbPA"><i
                    class="fa fa-youtube-play ico-tabl"></i></a></td>
              <td><a target="_blank" href="talks/berlin-2016-05-25/berlin-swarm-talk-final.pdf"><i
                    class="fa fa-file-pdf-o ico-tabl"></i></a></td>
            </tr>
            <tr>
              <td>Viktor Trón, Nick Johnson: Swarm, web3, and the Ethereum Name Service.</td>
              <td><a target="_blank" href="http://www.meetup.com/ethereum/events/231452190">Ethereum meetup London, 9
                  June 2016.</a></td>
              <td><a target="_blank" href="https://www.youtube.com/watch?v=BAAAhZI7qRQ"><i
                    class="fa fa-youtube-play ico-tabl"></i></a></td>
              <td>
                <a target="_blank" href="talks/london-2016-06-09/london-swarm-talk-1-intro-slides.pdf"><i
                    class="fa fa-file-pdf-o ico-tabl"></i></a>
                <a target="_blank" href="talks/london-2016-06-09/london-swarm-talk-2-ENS-slides.pdf"><i
                    class="fa fa-file-pdf-o ico-tabl"></i></a>
              </td>
            </tr>
            <tr>
              <td>Nagy Dániel, Trón Viktor: Ethereum és Swarm: okos szerződések és elosztott világháló.</td>
              <td><a target="_blank" href="http://www.meetup.com/BitcoinBudapest/events/231862845/">Budapest Bitcoin
                  Meetup. 20 June 2016.</a></td>
              <td><a target="_blank" href="https://www.youtube.com/watch?v=vD8PAJvhH-4"><i
                    class="fa fa-youtube-play ico-tabl"></i></a></td>
              <td><a target="_blank" href="talks/budapest-2016-06-20/budapest-swarm.pdf"><i
                    class="fa fa-file-pdf-o ico-tabl"></i></a></td>
            </tr>
            <tr>
              <td>Dániel Nagy: Swarm: Distributed storage for Ethereum, the Turing-complete blockchain.</td>
              <td><a target="_blank" href="http://www.it-sobytie.ru/en/events/4868">Linux Piter Nov 2015.</a></td>
              <td><a target="_blank" href="https://www.youtube.com/watch?v=N_vtxw6nfmQ"><i
                    class="fa fa-youtube-play ico-tabl"></i></a></td>
              <td><a target="_blank" href="talks/linux-piter-2015-11-21/linuxpiter.pdf"><i
                    class="fa fa-file-pdf-o ico-tabl"></i></a></td>
            </tr>
            <tr>
              <td>Viktor Trón, Dániel A. Nagy: Swarm. Ethereum Devcon1, London, Nov 2015.</td>
              <td>-</td>
              <td><a target="_blank" href="https://www.youtube.com/watch?v=VOC45AgZG5Q"><i
                    class="fa fa-youtube-play ico-tabl"></i></a></td>
              <td>-</td>
            </tr>
            <tr>
              <td>Dániel A. Nagy: Keeping the public record safe and accessible. Ethereum Devcon0, Berlin, Dec 2014.
              </td>
              <td>-</td>
              <td><a target="_blank"
                  href="https://www.youtube.com/watch?v=QzYZQ03ON2o&amp;list=PLJqWcTqh_zKEjpSej3ddtDOKPRGl_7MhS"><i
                    class="fa fa-youtube-play ico-tabl"></i></a></td>
              <td>-</td>
            </tr>
          </table>
        </div>
      </div>
    </div><!-- //Container -->
  </section><!-- //Status -->

  <section id="media">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-12 text-left">
          <div class="page-header" style="border-bottom: 0px;">
            <h1>Online Press</h1>
          </div>
          <table class="table table-responsive text-left">
            <tr>
              <td>Descr.</td>
              <td>Links</td>
            </tr>
            <tr>
              <td>Ethereum's holy trinity takes shape as Swarm testnet arrives.</td>
              <td><a target="_blank"
                  href="http://www.coindesk.com/ethereums-holy-trinity-takes-shape-swarm-testnet-arrives">Ethereum's
                  holy trinity takes shape as Swarm testnet arrives. Coindesk, Sep 25, 2016</a></td>
            </tr>
            <tr>
              <td>9 must-watch talks at Ethereum's devcon2.</td>
              <td><a target="_blank"
                  href="http://www.coindesk.com/9-must-watch-talks-at-ethereums-devcon2-developer-event">9 must-watch
                  talks at Ethereum's devcon2. Coindesk, Sep 25, 2016</a></td>
            </tr>
            <tr>
              <td>Ethereum's Viktor Trón talks about Swarm and the skeleton of Web 3.0.</td>
              <td><a target="_blank"
                  href="http://www.ibtimes.co.uk/ethereums-viktor-tron-talks-about-swarm-skeleton-web-3-0-1560654">Ethereum's
                  Viktor Trón talks about Swarm and the skeleton of Web 3.0. Ian Alison, IBTimes UK. May 18, 2016</a>
              </td>
            </tr>
            <tr>
              <td>Decentralized Storage: the Backbone of the Third Web.</td>
              <td><a target="_blank"
                  href="https://media.consensys.net/2016/06/30/decentralized-storage-the-backbone-of-the-third-web">Decentralized
                  Storage: the Backbone of the Third Web. Arthur Falls on Consensys Blog. June 30, 2016</a></td>
            </tr>
            <tr>
              <td>Decentralised storage Swarm to be built on Ethereum blockchain.</td>
              <td><a target="_blank"
                  href="http://www.coinfox.info/news/5472-poverkh-ethereum-budet-postroena-platforma-detsentralizovannogo-khraneniya-dannykh-swarm-2">Decentralised
                  storage Swarm to be built on Ethereum blockchain. Alexey Tereshchenko. Coinfox. 11 May, 2016</a></td>
            </tr>
          </table>
        </div>
      </div>
    </div><!-- //Container -->
  </section><!-- //Status -->

  <section id="contact">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-md-12 text-left">
          <div class="page-header" style="border-bottom: 0px;">
            <h1>Contact Information</h1>
            <p class="lead">The Swarm team is reachable on <a href="https://gitter.im/ethereum/swarm">Gitter</a>.</p>
            <p class="lead">Discussions about Swarm on <a href="https://www.reddit.com/r/ethswarm"
                target="_blank">/r/ethswarm</a> and <a href="https://www.reddit.com/r/ethereum"
                target="_blank">/r/ethereum</a> subreddits.</p>
            <p class="lead">Please feel free to reach out via <a href="mailto:info@ethswarm.org">info@ethswarm.org</p>
          </div>
        </div>
      </div>

    </div>
    <!--Container-->
  </section>
  <!--Contact-->

  <div style="min-height:80px;"></div>

  <!---<p>Back to <a href="../sticky-footer">the default sticky footer</a> minus the navbar.</p>
  </div>--->

  <footer class="navbar-fixed-bottom" id="contact">
    <div class="container">
      <div class="row footercon">
        <div class="col-xs-12 col-md-12 text-left linkframe">
          <a href="https://swarm-guide.readthedocs.io">
            <i class="fa fa-book" aria-hidden="true"></i>
            Documentation
          </a>
          <a href="https://github.com/ethersphere/swarm">
            <i class="fa fa-bolt" aria-hidden="true"></i>
            Source Code
          </a>
          <a href="https://github.com/ethersphere/swarm/issues">
            <i class="fa fa-github-alt" aria-hidden="true"></i>
            Issues on Github
          </a>
          <a href="https://twitter.com/ethswarm">
            <i class="fa fa-twitter" aria-hidden="true"></i>
            Swarm on Twitter
          </a>
          <a href="https://twitter.com/ethersphere">
            <i class="fa fa-twitter" aria-hidden="true"></i>
            Ethersphere on Twitter
          </a>
          <span class="text-right"
            style="float:right; color:#ccc; font-weight:200;font-size: 0.7em; margin-top: 6px;">©2019 Swarm</span>
        </div>
      </div>
      <!--row-->
    </div>
    <!--container-->
  </footer>

  <!-- Bootstrap core JavaScript
  ================================================== -->
  <!-- Placed at the end of the document so the pages load faster -->
  <script src="./Swarm_files/frontier.min.js"></script>
  <!--<script src="./Swarm_files/highlight.min.js"></script>-->
  <script>$(document).ready(function () {
      $("#toc").tableOfContents(
        $(".main-tutorial"),      // Scoped to div#wrapper
        {
          startLevel: 2,    // H2 and up
          depth: 3    // H2 through h3,
        }
      );
    });</script>
  <!--- TOP ANIMATION DON`T LIKE THIS <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script> --->
  <script>window.jQuery || document.write('<script src="./js/vendor/jquery.min.js"><\/script>')</script>
  <script src="./js/bootstrap.min.js"></script>
  <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
  <script src="./js/ie10-viewport-bug-workaround.js"></script>
  <iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true"
    style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;"></iframe>
</body>

</html>
